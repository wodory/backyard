---
description: 
globs: 
alwaysApply: false
---
do exe

​아래 문서를 참고해서 

~~

# Next.js 15 Vitest 기반 클라이언트 컴포넌트 테스트 가이드

Next.js 15의 App Router 환경에서 **Vitest**와 React Testing Library를 사용해 클라이언트 컴포넌트를 테스트하는 방법을 정리합니다. Vitest 설정부터 Next 전용 훅의 모킹, 사용자 이벤트 처리, API 호출 테스트, 타임아웃 이슈 해결까지 순서대로 다룹니다.

## 1. Next App Router 훅 (next/navigation 및 next/headers) 모킹

  **`useRouter()`** 호출 시 `{ push: jest.fn(), ... }`처럼 미리 정의된 dummy 객체를 반환하므로, 컴포넌트 내에서 `router.push()`를 호출해도 오류가 나지 않습니다. 필요에 따라 `push` 등을 테스트 내에서 `vi.fn()`으로 감시(spy)하여 특정 경로로 호출되었는지 `expect(router.push).toHaveBeenCalledWith('/target')` 형태로 단언(assertion)할 수도 있습니다. 

요약하면, **가장 간단한 방법은** `vi.mock`으로 `useRouter` 등의 훅을 더미로 대체하는 것입니다. 이렇게 하면 **클라이언트 컴포넌트가 라우터에 의존하더라도** 테스트에서 오류 없이 렌더링되고, Router 메서드 호출 여부도 검증할 수 있습니다 ([How to mock useRouter from next/navigation? · vercel next.js · Discussion #48937 · GitHub](https://github.com/vercel/next.js/discussions/48937#:~:text=vi.mock%28,get%3A%20vi.fn%28%29%2C)).

## 2. 클라이언트 컴포넌트의 사용자 상호작용 테스트

사용자 이벤트(예: 버튼 클릭, 폼 입력 등)를 테스트하려면 **React Testing Library**의 `userEvent`를 활용하면 됩니다. Vitest + JSDOM 환경에서는 실제 브라우저 없이도 DOM 상호작용을 시뮬레이션할 수 있습니다. 주요 포인트는 **실제 유저 행동을 흉내내기 위해** 이벤트를 일으키고, 그 결과로 컴포넌트의 상태 변화나 DOM 변화가 잘 일어났는지 검증하는 것입니다.

- **userEvent 설정:** Testing Library에서는 `userEvent.setup()`을 호출해 이벤트 객체를 생성한 뒤, 해당 객체를 통해 상호작용을 수행할 것을 권장합니다 ([Introduction | Testing Library](https://testing-library.com/docs/user-event/intro/#:~:text=Writing%20tests%20with%20)). `setup()`은 브라우저의 시간 경과와 이벤트 순서를 내부적으로 처리해주므로, 테스트 코드가 안정적으로 동작합니다. 예를 들어:

  ```tsx
  import { render, screen } from '@testing-library/react';
  import userEvent from '@testing-library/user-event';
  import MyComponent from './MyComponent';

  test('버튼 클릭 시 다이얼로그가 열리는지 테스트', async () => {
    const user = userEvent.setup();
    render(<MyComponent />);
    // 다이얼로그는 처음에 닫혀 있어야 함
    expect(screen.queryByRole('dialog')).toBeNull();

    // "Open Dialog" 라는 텍스트를 가진 버튼 클릭
    await user.click(screen.getByRole('button', { name: /Open Dialog/i }));
    // 다이얼로그 열렸는지 확인 (role="dialog" 또는 내용 텍스트로 확인)
    expect(screen.getByRole('dialog')).toBeInTheDocument();
  });
  ```

  위 테스트에서는 `Open Dialog` 버튼을 클릭한 후 다이얼로그가 DOM에 등장했는지 확인합니다. `userEvent`의 클릭 메서드는 프로미스를 반환하므로 `await`을 사용해 **이벤트 처리 및 후속 렌더링이 완료될 때까지** 기다립니다. 또한 `screen.queryBy...`를 이용해 **존재하지 않아야 하는 요소**(다이얼로그가 열리기 전)를 확인하고, 이벤트 후에는 `screen.getBy...`로 요소가 존재함을 확인합니다. 이렇게 **사전 상태 -> 이벤트 발생 -> 사후 상태**를 검증하는 패턴을 따르면 됩니다.

- **폼 입력 및 제출 시나리오:** 예를 들어 폼에 텍스트를 입력하고 제출하는 경우도 `userEvent`로 처리할 수 있습니다. `await user.type(inputElement, 'Hello')`로 입력하고 `user.click(submitButton)`으로 제출 이벤트를 보낸 뒤, 예상되는 결과(예: 폼 제출에 따른 화면 변화나 함수 호출)를 검증합니다. 필요하면 `fireEvent.submit(formElement)` 등의 저수준 이벤트를 사용할 수도 있지만, 가능한 `userEvent`가 더 현실적인 사용자 흐름을 모사하므로 권장됩니다 ([Introduction | Testing Library](https://testing-library.com/docs/user-event/intro/#:~:text=Differences%20from%20)).

- **비동기 동작에 대한 대기:** 사용자 이벤트 이후 API 호출이나 타이머에 의해 상태 변경이 이루어지는 경우, **`screen.findBy...`** 또는 **`waitFor`**를 사용하여 결과를 기다릴 수 있습니다. 예를 들어 버튼 클릭 -> 로딩 스피너 표시 -> 서버 응답 후 메시지 표시 같은 흐름을 테스트하려면:

  ```tsx
  await user.click(screen.getByRole('button', { name: /Send/i }));
  expect(screen.getByText('로딩 중...')).toBeInTheDocument();
  // API 응답으로 "전송 완료" 텍스트가 나타날 때까지 대기 (기본 타임아웃 내)
  const successMessage = await screen.findByText('전송 완료');
  expect(successMessage).toBeVisible();
  ```
  
  `findByText`는 프로미스를 반환하며 지정한 텍스트가 나타나면 해제(resolve)되므로, 이를 `await`하여 **비동기 동작 완료를 기다린 뒤** 검증을 수행할 수 있습니다 ([Example | Testing Library](https://testing-library.com/docs/react-testing-library/example-intro#:~:text=await%20userEvent)) ([Example | Testing Library](https://testing-library.com/docs/react-testing-library/example-intro#:~:text=test,)). 이렇게 하면 테스트가 너무 빨리 완료되어 발생하는 false negative를 막고, 실제 동작과 어긋나지 않는지 검증할 수 있습니다.

요약하면, **사용자 이벤트 테스트의 핵심은** `userEvent`로 실제 클릭/입력 등을 재현하고, 그 결과 컴포넌트의 DOM이 기대대로 바뀌었는지 assertions 하는 것입니다. Next.js의 클라이언트 컴포넌트도 일반 React 컴포넌트와 동일하게 이러한 방식으로 상호작용을 테스트할 수 있습니다.

## 3. API 호출(fetch) 테스트 방법

클라이언트 컴포넌트에서 **fetch 등을 통해 API를 호출**하는 기능을 테스트하려면 실제 네트워크 요청을 보내지 않고도 해당 로직을 검증할 수 있도록 **모킹**해야 합니다. 두 가지 대표적인 접근법은 **Mock Service Worker (MSW)**를 사용한 **통합적인 API 모킹**과, Vitest의 `vi.spyOn`/`vi.mock`을 사용한 **fetch 함수 스파이**입니다.

- **Mock Service Worker를 사용한 네트워크 모킹:** Vitest 공식 가이드에서는 Node 환경에서의 HTTP 요청 모킹 방법으로 MSW를 권장합니다 ([Mocking | Guide | Vitest](https://vitest.dev/guide/mocking#:~:text=Because%20Vitest%20runs%20in%20Node%2C,requests%2C%20and%20is%20framework%20agnostic)). MSW는 서비스 워커 또는 Node 인터셉터를 통해 **애플리케이션 코드를 수정하지 않고** fetch/XHR 요청을 가로채 가짜 응답을 주도록 설정할 수 있습니다 ([Mocking | Guide | Vitest](https://vitest.dev/guide/mocking#:~:text=Mock%20Service%20Worker%20,about%20MSW%2C%20read%20their%20introduction)). 

  MSW를 사용하려면 테스트 코드에서 한 번 **서버를 설정**해두고, 각 테스트 전에 이를 시작합니다. 예를 들어 `test/setup.ts`에 다음과 같이 작성합니다:

  ```ts
  import { setupServer } from 'msw/node';
  import { rest } from 'msw';
  import { beforeAll, afterEach, afterAll } from 'vitest';

  // 가짜 핸들러 정의: /api/data 경로 호출시 더미 응답 반환
  const server = setupServer(
    rest.get('/api/data', (req, res, ctx) => {
      return res(ctx.json({ result: 'hello' }));
    })
  );

  // 모든 테스트 시작 전에 MSW 서버 리스닝 시작
  beforeAll(() => server.listen({ onUnhandledRequest: 'error' }));
  // 각 테스트 후 핸들러 호출 기록 초기화 (테스트 격리)
  afterEach(() => server.resetHandlers());
  // 모든 테스트 종료 후 서버 닫기
  afterAll(() => server.close());
  ```

  그런 다음, 컴포넌트 테스트에서 버튼 클릭 등이 fetch를 유발하면, 실제로는 MSW의 가짜 서버가 인터셉트하여 `{ result: 'hello' }`같은 응답을 즉시 반환합니다 ([Mocking | Guide | Vitest](https://vitest.dev/guide/mocking#:~:text=export%20const%20restHandlers%20%3D%20,)). 컴포넌트는 이를 받아 상태를 업데이트하고 DOM을 렌더링할 것이므로, 테스트에서는 그 **결과(DOM 변화)**를 검증하면 됩니다. 예를 들어 API 호출로 받아온 `result`를 화면에 표시한다면 `await screen.findByText('hello')`로 확인합니다. MSW를 쓰면 실제 API 호출처럼 동작하지만 네트워크 지연이 없고, 응답을 쉽게 제어할 수 있어 **안정적인 테스트**가 가능합니다 ([Example | Testing Library](https://testing-library.com/docs/react-testing-library/example-intro#:~:text=import%20Fetch%20from%20%27)).

- **fetch를 직접 모킹하거나 감시(spying)하기:** 간단한 단위 테스트의 경우 MSW 설정이 부담스럽다면, 전역 `fetch` 함수를 가짜로 만들어버릴 수도 있습니다. Vitest 환경이 Node 18 이상이라면 기본적으로 `global.fetch`가 정의되어 있지만, JSDOM에서는 기본 fetch 미구현 사항에 주의해야 합니다 ([Example | Testing Library](https://testing-library.com/docs/react-testing-library/example-intro#:~:text=Our%20example%20here%20uses%20axios,jsdom%20environment%20which%20includes%20fetch)) (Vitest 실행 시에는 Node fetch가 제공되므로 크게 문제되진 않습니다). 

  직접 모킹하는 방법으로는 `vi.spyOn(global, 'fetch')`를 사용해 호출 여부와 인자를 확인하고 원하는 응답을 흉내낼 수 있습니다. 예를 들어:

  ```ts
  const fetchSpy = vi.spyOn(global, 'fetch').mockResolvedValue(
    new Response(JSON.stringify({ result: 'ok' }), { status: 200, headers: { 'Content-Type': 'application/json' } })
  );

  // ... (이후 사용자 이벤트로 fetch 호출 트리거)
  await user.click(screen.getByText('데이터 불러오기'));
  
  expect(fetchSpy).toHaveBeenCalledWith('/api/data', expect.any(Object));
  // fetchSpy.mock.results[0].value 등을 활용해 응답 처리 검증 가능
  ```

  위 코드에서는 `global.fetch`를 가로채 항상 `{ result: 'ok' }` JSON을 반환하도록 했습니다. 이렇게 하면 컴포넌트의 fetch 호출이 실제로 일어났는지 (`toHaveBeenCalledWith`), 그리고 컴포넌트가 그 응답을 받아 제대로 동작했는지 후속 검증을 할 수 있습니다. 예컨대 fetch 응답 후 "불러오기 성공" 메시지가 뜬다면 `await screen.findByText('불러오기 성공')`으로 확인합니다.

  또한 `vi.mock('node-fetch', ...)` 등의 방식으로 fetch 구현체 자체를 모듈 모킹하거나, `global.fetch = () => Promise.resolve(fakeResponse)`로 간단히 대체하는 방법도 있습니다. 그러나 이러한 수동 모킹은 요청별 세부 제어가 어렵기 때문에, **여러 API 엔드포인트를 테스트하거나 다양한 응답을 시뮬레이트하려면** MSW 접근이 더 유용합니다.

**정리:** API 호출 테스트에서는 **실제 네트워크를 발생시키지 않는 것**이 중요합니다. **MSW**를 사용하면 테스트 중 fetch 요청을 가로채 가짜 응답을 주므로 **신뢰성과 속도**를 모두 얻을 수 있습니다 ([Mocking | Guide | Vitest](https://vitest.dev/guide/mocking#:~:text=Mock%20Service%20Worker%20,about%20MSW%2C%20read%20their%20introduction)). 간단한 경우는 `global.fetch`에 대한 **spy/mock**로도 처리가 가능하며, 이 경우 호출된 URL이나 옵션을 단언하는 방식으로 테스트합니다. 

## 4. 테스트 타임아웃 방지 및 안정적인 실행 환경

Vitest로 Next.js 컴포넌트를 테스트할 때 **타임아웃**이 발생하는 원인은 대부분 **비동기 작업이 완료되기를 기다리지 못한 경우**입니다. 이를 방지하고 테스트를 안정적으로 실행하기 위한 팁은 다음과 같습니다:

- **비동기 동작 완료 대기:** 앞서 언급했듯 `findBy...` 쿼리나 `waitFor` 유틸리티를 사용하여 컴포넌트의 비동기 업데이트를 기다리세요. 예를 들어 API 응답으로 생성되는 요소는 `screen.findByText`로 기다린 후 assert해야 테스트가 일정 시간 내에 통과하거나 실패합니다. 이때 `findBy` 계열 메서드는 기본 타임아웃(예: 1000ms)을 가지고 있으며, 필요하면 옵션으로 시간을 늘릴 수도 있습니다. 반면 `getBy`는 즉시 검색이므로 비동기 결과를 찾는 데 쓰면 테스트가 바로 실패하거나 불필요하게 loop를 돌게 되어 타임아웃의 원인이 됩니다.

- **userEvent의 Promise 활용:** `userEvent.click`, `userEvent.type` 등은 모두 프로미스를 반환하므로 `await`을 붙여 호출하세요 ([Introduction | Testing Library](https://testing-library.com/docs/user-event/intro/#:~:text=%2F%2F%20inlining%20test,)) ([Introduction | Testing Library](https://testing-library.com/docs/user-event/intro/#:~:text=await%20user.click%28screen.getByRole%28%27button%27%2C%20)). 이를 통해 해당 이벤트로 인해 발생한 리렌더나 사이드이펙트가 처리된 뒤 다음 검증 단계로 넘어가게 됩니다. 만약 `userEvent`를 await하지 않으면, React의 상태 업데이트가 완료되기 전에 테스트 스레드가 진행되어 assertion이 실패하거나, 반대로 Vitest가 완료되지 않은 상태변화를 기다리느라 타임아웃이 날 수 있습니다.

- **의도치 않은 실제 호출 제거:** 테스트 중 실수로 실제 API를 호출하거나, 처리되지 않은 fetch 요청이 남아있으면 테스트가 끝나지 않고 대기상태가 됩니다. MSW를 쓴다면 `onUnhandledRequest: 'error'` 옵션으로 예상치 못한 네트워크 호출이 일어나면 바로 오류를 내도록 설정하는 것이 좋습니다 ([Mocking | Guide | Vitest](https://vitest.dev/guide/mocking#:~:text=%2F%2F%20Start%20server%20before%20all,onUnhandledRequest%3A%20%27error%27)). 이렇게 하면 놓친 모킹으로 인한 타임아웃을 방지할 수 있습니다.

- **테스트 격리와 정리(cleanup):** 각 테스트(unit) 간에 공유 상태가 없도록 해야 합니다. 예를 들어 MSW의 `server.resetHandlers()`를 afterEach에 호출해 이전 테스트에서 등록한 임시 handler를 지우고, `vi.restoreAllMocks()` 등을 통해 `spyOn`한 것들을 원상복구하면 테스트 간 간섭을 막을 수 있습니다. React Testing Library는 기본적으로 매 테스트 후 DOM을 정리하지만, 혹시 수동으로 `cleanup()`이 필요한 경우 불러주는 것도 검토하세요. 격리가 안 되면 예상치 못한 동작으로 시간이 지연될 수 있습니다.

- **시간 관련 함수 제어:** 컴포넌트에서 `setTimeout`, `setInterval` 등을 사용한다면 Vitest의 가상 타이머(`vi.useFakeTimers` 등)로 제어 가능하지만, 일반적으로 userEvent와 Testing Library가 알아서 처리합니다. 그래도 타이머로 인해 테스트가 지연된다면 가상 타이머로 빨리 진행시키거나 (`vi.advanceTimersByTime`), 필요 시 실제 타이머로 전환(`vi.useRealTimers`)하는 등의 조치를 취할 수 있습니다.

- **Vitest 환경 설정 확인:** Vitest의 기본 테스트 타임아웃은 5초입니다. 특별히 시간이 더 필요한 통합 테스트라면 `vitest.config.ts`의 `test.timeout` 옵션을 늘리거나, 개별 테스트에 `test.concurrent`나 `test.slow` 등을 표시해 여유를 줄 수 있습니다. 하지만 단위 테스트 단계에서 5초 넘게 걸리는 일은 거의 없기 때문에, **항상 비동기 흐름을 올바르게 await**하는 편이 우선입니다. 

요약하면 **"기다릴 것은 기다리고, 불필요한 것은 막는다"**가 타임아웃 방지의 요체입니다. Next.js 클라이언트 컴포넌트 테스트에서도 이 원칙을 지키면 대체로 안정적으로 통과합니다. 특히 fetch 같은 것은 실제로 나가지 않도록 모킹해야 하며, React 상태 업데이트가 끝날 때까지 테스트 코드가 기다리도록 작성해야 합니다. 

## 6. 참고 자료

- **Next.js 공식 Vitest 테스트 가이드** – Vitest 설정 및 기본 사용법 (Next.js 15 문서) 
https://nextjs.org/docs/app/building-your-application/testing/vitest#:~:text=export%20default%20defineConfig%28

https://nextjs.org/docs/app/building-your-application/testing/vitest#:~:text=import%20,library%2Freact%27%20import%20Page%20from%20%27..%2Fapp%2Fpage

- **Vitest 공식 문서: 네트워크 요청 모킹** – Vitest에서 MSW를 이용해 HTTP 요청을 모킹하는 방법 
https://vitest.dev/guide/mocking#:~:text=Mock%20Service%20Worker%20,about%20MSW%2C%20read%20their%20introduction
https://vitest.dev/guide/mocking

- **Next.js Discussions (GitHub)** – App Router 환경에서 `useRouter` 훅을 모킹하는 방법 예시 코드
https://github.com/vercel/next.js/discussions/48937

- **Testing Library 예제** – `fetch`를 사용하는 컴포넌트의 테스트 예시 (MSW로 fetch 응답 모킹
https://testing-library.com/docs/react-testing-library/example-intro

- **Testing Library user-event 문서** – `@testing-library/user-event`를 활용해 사용자 인터랙션을 구현하는 가이드 
https://testing-library.com/docs/user-event/intro
