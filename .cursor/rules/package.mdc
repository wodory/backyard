---
description: 
globs: 
alwaysApply: true
---
# --- START OF FILE: .cursor/rules/package.mdc ---
description: Package manager and testing conventions.
globs:
  - package.json
  - yarn.lock
  - src/**/*.{test.ts,test.tsx}
alwaysApply: true
---

# Package manager
- 패키지 관리를 통일하기 위해 패키지 관리자는 yarn만 사용. 
- 패키지 설치/업데이트 시 `yarn` 명령어를 사용한다. (예: `yarn add [패키지명]`, `yarn upgrade [패키지명]`)

# 테스트 방식
- vitest 공식 문서대로 작성
- 테스트 커버리지를 유지/개선하기 위해 새로운 기능을 추가하거나 기존 코드를 수정하면, 반드시 해당 코드의 **의도된 동작**을 검증하는 테스트 파일 (`*.test.ts`, `*.test.tsx`)을 생성하거나 업데이트해야 함.
    - 테스트는 가급적 애플리케이션 코드의 **현재 인터페이스나 구현**을 기반으로 작성되어야 함.
    - 만약 애플리케이션 코드의 구조가 **테스트를 매우 어렵게** 만들 경우 (예: 의존성 주입 불가, 부수 효과 분리 불가 등), **테스트 가능성(testability) 확보**를 위한 **최소한의 필수적인 리팩토링**을 진행할 수 있음.
    - **중요:** 테스트 가능성 확보를 위해 애플리케이션 코드를 리팩토링한 경우에는, **반드시 해당 작업 직후 `do rev` 명령을 실행**하여 사용자에게 변경된 내용과 그 이유('테스트 가능성 확보' 또는 '의존성 분리' 등 설계 개선 관점)를 명확하게 보고해야 함. (`[MODE: REVIEW]` 자동 수행)
- 테스트 작성 시, API 호출이 포함된 로직은 반드시 MSW 핸들러 (`src/tests/msw/handlers.ts`)를 사용하여 모킹해야 함.
- 사용자가 q를 입력하지 않아도 테스트를 자동 종료하기 위해 테스트 커맨드는 'yarn vitest run'
- 테스트 파일을 찾기 쉽도록 테스트 파일은 테스트 대상 파일과 같은 폴더에서 만든다. 
- 여러 파일을 테스트하는 통합 테스트 파일은 테스트 대상 파일의 상위 폴더에 만든다. 

# --- END OF FILE ---