---
description: 
globs: 
alwaysApply: false
---
## 작업: `{target_folder}` 폴더 종합 테스트 커버리지 90% 달성

**목표:** `{target_folder}` 디렉토리 (모든 하위 디렉토리 포함) 내 관련 파일들의 Vitest 테스트 **라인(Line), 브랜치(Branch), 함수(Function) 커버리지**를 각각 **최소 90%**로 높입니다.

**컨텍스트:**
*   `yarn test run --coverage {target_folder}` 명령으로 생성된 최신 Vitest 커버리지 리포트(또는 전체 리포트)를 기반으로 작업합니다.
*   테스트 프레임워크는 Vitest와 `@testing-library/react`를 사용합니다.
*   프로젝트 규칙, 특히 모킹(`vi.mock`, MSW) 및 테스트 구조(`[package]`, `[zustand-action-msw]` 등)에 관한 규칙을 준수해야 합니다.

**지시사항:**

1.  **저조한 커버리지 파일 식별:**
    *   최신 Vitest 커버리지 리포트(`coverage/index.html` 또는 JSON 출력)를 분석합니다.
    *   `{target_folder}` 내에서 **라인(Line %), 브랜치(Branch %), 함수(Functions %)** 커버리지 중 **하나라도** 90% 미만인 모든 `.ts` 및 `.tsx` 파일을 식별합니다 (테스트 파일, `.d.ts` 등 제외).
    *   식별된 각 파일에 대해, 리포트에서 **커버되지 않은 라인(Uncovered Lines)**, **커버되지 않은 브랜치**(종종 'I' 또는 'E'로 표시됨), **커버되지 않은 함수**(호출되지 않은 함수)를 명시합니다.

2.  **각 저조 파일에 대한 테스트 케이스 추가/개선 (반복 작업):**
    *   **파일 선택:** 1단계에서 식별된 파일 중 하나를 선택합니다 (예: `{target_folder}/example.ts`).
    *   **미커버 영역 분석:**
        *   **라인:** 실행되지 않은 특정 코드 라인을 분석합니다. 해당 라인이 실행되기 위해 필요한 조건이나 입력은 무엇인지 파악합니다.
        *   **브랜치:** 커버되지 않은 조건(`if`/`else`, `&&`/`||`, `?.`, `??`, `switch`) 경로를 분석합니다. 해당 경로를 타기 위한 특정 시나리오를 파악합니다. **특히, `try...catch` 블록의 `catch` 경로, 오류 반환 로직, 조건부 오류 처리 등 예외 상황과 관련된 브랜치를 주의 깊게 확인합니다.**
        *   **함수:** 정의되었지만 테스트에서 한 번도 호출되지 않은 함수를 식별합니다.
    *   **테스트 작성/수정:**
        *   해당 파일의 테스트 파일(예: `{target_folder}/example.test.ts`)을 찾거나 생성합니다.
        *   커버되지 않은 **라인, 브랜치, 함수**를 실행/호출하는 새로운 `test` 또는 `it` 블록을 추가하거나 기존 테스트를 수정합니다.
        *   **시나리오 고려:**
            *   **라인 커버리지:** 특정 라인이 실행되도록 하는 입력값이나 상태를 설정하고 테스트합니다.
            *   **브랜치 커버리지:** 모든 가능한 코드 경로(정상 경로 및 **오류 경로**)를 실행하는 테스트 케이스를 작성합니다.
            *   **함수 커버리지:** 테스트되지 않은 함수가 최소 한 번 이상 호출되도록 하는 테스트 케이스를 추가하고, 해당 함수의 의도된 동작을 검증합니다.
            *   **오류 경로 및 예외 처리:**
                *   **필수 사항:** `try...catch` 구문의 `catch` 블록이 실행되는 경우, 함수가 예상된 오류를 반환하거나 던지는 경우, 외부 호출(API, DB 등)이 실패하는 경우 등을 **의도적으로 시뮬레이션**합니다.
                *   **검증:** 이러한 오류 상황에서 애플리케이션이 **예상대로 동작**하는지(예: 적절한 오류 로깅, 사용자에게 피드백 제공, 대체 로직 수행, 함수의 안정적인 종료) 검증하는 테스트를 **반드시 포함**합니다. `auth-storage.ts`의 예시처럼 `catch` 블록 내 로직이 실행되는지 확인합니다.
            *   **상태/Prop 변형:** 컴포넌트/훅의 경우, 다양한 props나 초기 상태 값에 따라 다른 코드 경로가 실행되는지 테스트합니다.
    *   **모킹 활용:** `vi.mock`, `vi.spyOn` 또는 MSW(`server.use()`로 특정 핸들러 사용)를 사용하여 테스트 대상 단위를 격리하고 의존성(API 호출, DB 접근, 타이머, 다른 모듈)을 제어합니다. **특히, 오류 상황을 시뮬레이션하기 위해 `vi.fn().mockRejectedValue(...)`, `vi.fn().mockImplementation(() => { throw new Error(...) })` 또는 MSW에서 에러 응답(예: `HttpResponse.json({ error: '...' }, { status: 500 })`)을 반환하도록 설정합니다.**
    *   **명확한 이름 지정:** 각 테스트 케이스의 목적(어떤 라인/브랜치/함수를 커버하는지, **특히 오류 시나리오**)을 명확히 설명하는 이름을 사용합니다 (예: `it('should handle database connection errors gracefully')`, `it('logs an error when file writing fails')`).

3.  **모든 파일에 대해 반복:** `{target_folder}` 내에서 1단계에서 식별된 *모든* 파일에 대해 2단계 작업을 반복합니다.

4.  **커버리지 확인 및 개선:**
    *   테스트 추가 후, 커버리지 명령을 다시 실행합니다: `yarn test run --coverage {target_folder}`.
    *   업데이트된 커버리지 리포트에서 `{target_folder}` 내 파일들의 **라인, 브랜치, 함수 커버리지**를 모두 확인합니다.
    *   여전히 세 가지 커버리지 유형 중 하나라도 90% 미만인 파일이 있다면, 해당 파일의 **커버되지 않은 특정 영역**(라인, 브랜치 또는 함수)을 다시 분석하고 필요한 테스트 케이스를 추가하는 2단계를 반복합니다. **특히, 브랜치 커버리지가 낮은 경우 오류 처리 경로가 누락되지 않았는지 다시 확인합니다.**
    *   폴더 내 모든 관련 파일의 **모든 세 가지 커버리지 유형**이 90% 목표를 달성할 때까지 반복합니다.

**중요 참고 사항:**
*   단순히 커버리지 비율을 기계적으로 높이는 것이 아니라, 각 라인, 브랜치, 함수의 **의도된 로직(정상 및 오류 처리 포함)**을 검증하는 **의미 있는 테스트**를 작성하는 데 집중해야 합니다. **오류 처리 경로는 애플리케이션 안정성에 매우 중요하므로 반드시 테스트해야 합니다.**
*   새로 작성하거나 수정한 테스트가 기존 프로젝트의 테스트 규약 및 규칙(`[package]`, `[zustand-action-msw]` 등)을 준수하는지 확인해야 합니다.
*   만약 소스 코드를 테스트 가능하게 만들기 위해 **상당한 리팩토링**이 *필수적*이라면, **작업을 중단**하고 검토를 위해 이 필요성을 보고해야 합니다 (`[package]` 규칙 참조).