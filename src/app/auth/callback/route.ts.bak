// 이 파일은 더 이상 사용되지 않습니다.
// 인증 콜백은 page.tsx의 클라이언트 컴포넌트에서 처리됩니다.
// 아래 코드는 참조용으로 남겨둡니다.

/*
import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import prisma from '@/lib/prisma';

export async function GET(request: Request) {
  // URL에서 코드 추출
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get('code');
  
  if (!code) {
    console.log('인증 코드 없음, 홈으로 리디렉션');
    return NextResponse.redirect(new URL('/', requestUrl.origin));
  }

  try {
    console.log('인증 코드 수신:', code);
    
    // Supabase 클라이언트 생성
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    );
    
    // 코드를 세션으로 교환
    const { data, error } = await supabase.auth.exchangeCodeForSession(code);
    
    if (error) {
      console.error('세션 교환 오류:', error.message);
      return NextResponse.redirect(
        new URL(`/login?error=exchange_failed&message=${encodeURIComponent(error.message)}`, requestUrl.origin)
      );
    }
    
    console.log('세션 교환 성공:', data?.session ? '세션 있음' : '세션 없음');
    
    // 사용자 정보 DB에 저장
    if (data?.user) {
      try {
        // 이미 등록된 사용자인지 확인
        const existingUser = await prisma.user.findUnique({
          where: { id: data.user.id },
        });
        
        // 사용자가 데이터베이스에 없으면 새로 생성
        if (!existingUser && data.user.email) {
          console.log('새 사용자 생성:', data.user.email);
          
          await prisma.user.create({
            data: {
              id: data.user.id,
              email: data.user.email,
              name: data.user.user_metadata?.full_name || data.user.email.split('@')[0],
            },
          });
        } else if (existingUser) {
          console.log('기존 사용자:', existingUser.email);
        }
      } catch (dbError) {
        console.error('DB 사용자 처리 오류:', dbError);
        // DB 오류가 있어도 인증은 계속 진행
      }
    }
    
    // 보드 페이지로 리디렉션
    console.log('인증 완료, 보드 페이지로 리디렉션');
    return NextResponse.redirect(new URL('/board', requestUrl.origin));
  } catch (error: any) {
    console.error('인증 처리 중 오류:', error?.message || '알 수 없는 오류');
    return NextResponse.redirect(
      new URL(`/login?error=auth_callback_failed&message=${encodeURIComponent(error?.message || '알 수 없는 오류')}`, requestUrl.origin)
    );
  }
}
*/ 