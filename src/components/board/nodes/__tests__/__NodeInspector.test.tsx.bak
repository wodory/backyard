/**
 * 파일명: NodeInspector.test.tsx
 * 목적: NodeInspector 컴포넌트 테스트
 * 역할: 노드 인스펙터 컴포넌트의 기능 테스트
 * 작성일: 2024-05-31
 */

import { vi, describe, it, expect, beforeEach } from 'vitest';
import { render, screen } from '@testing-library/react';
import { NodeInspector } from '../NodeInspector';
import { useNodeStore } from '@/store/useNodeStore';
import { Node } from '@xyflow/react';

// 모달 모킹
vi.mock('@/components/ui/modal', () => ({
  Modal: {
    Root: ({ children, open }: { children: React.ReactNode; open: boolean }) => open ? <div data-testid="modal">{children}</div> : null,
    Content: ({ children }: { children: React.ReactNode }) => <div data-testid="modal-content">{children}</div>,
    Title: ({ children }: { children: React.ReactNode }) => <h2 data-testid="modal-title">{children}</h2>,
    Close: ({ children }: { children: React.ReactNode }) => <button data-testid="modal-close">{children}</button>,
  }
}));

// TiptapViewer 모킹
vi.mock('@/components/editor/TiptapViewer', () => ({
  default: ({ content }: { content: string }) => <div data-testid="tiptap-viewer">{content}</div>,
}));

// 노드 스토어 모킹
vi.mock('@/store/useNodeStore', () => ({
  useNodeStore: vi.fn(),
}));

describe('NodeInspector', () => {
  const mockNodes: Node[] = [
    {
      id: '1',
      data: { title: '테스트', content: '내용' },
      position: { x: 0, y: 0 },
      type: 'card',
    }
  ];

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('닫기 버튼을 클릭하면 인스펙터가 닫혀야 함', () => {
    const mockSetInspectorOpen = vi.fn();
    const mockState = {
      inspectorOpen: true,
      inspectedNode: mockNodes[0],
      setInspectorOpen: mockSetInspectorOpen,
    };

    (useNodeStore as any).mockImplementation((selector: (state: any) => any) => {
      if (typeof selector === 'function') {
        return selector(mockState);
      }
      return mockState;
    });

    render(<NodeInspector nodes={mockNodes} />);

    // 모달이 열려있는지 확인
    expect(screen.getByTestId('modal')).toBeInTheDocument();

    // 닫기 버튼 클릭
    const closeButton = screen.getByTestId('modal-close');
    closeButton.click();

    // setInspectorOpen이 false로 호출되었는지 확인
    expect(mockSetInspectorOpen).toHaveBeenCalledWith(false);
  });

  it('인스펙터가 닫혀 있을 때 모달이 표시되지 않아야 함', () => {
    const mockState = {
      inspectorOpen: false,
      inspectedNode: mockNodes[0],
      setInspectorOpen: vi.fn(),
    };

    (useNodeStore as any).mockImplementation((selector: (state: any) => any) => {
      if (typeof selector === 'function') {
        return selector(mockState);
      }
      return mockState;
    });

    render(<NodeInspector nodes={mockNodes} />);

    // 모달이 없는지 확인
    expect(screen.queryByTestId('modal')).toBeNull();
  });

  it('인스펙트된 노드가 없을 때 모달이 표시되지 않아야 함', () => {
    const mockState = {
      inspectorOpen: true,
      inspectedNode: null,
      setInspectorOpen: vi.fn(),
    };

    (useNodeStore as any).mockImplementation((selector: (state: any) => any) => {
      if (typeof selector === 'function') {
        return selector(mockState);
      }
      return mockState;
    });

    render(<NodeInspector nodes={mockNodes} />);

    // 모달이 없는지 확인
    expect(screen.queryByTestId('modal')).toBeNull();
  });
}); 