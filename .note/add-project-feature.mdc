---
description: 
globs: 
alwaysApply: false
---
# 프로젝트 기능 도입 및 DB 리팩토링 실행 계획

## 개요

본 문서는 사용자의 요구사항에 따라 'Project' 개념을 애플리케이션에 도입하기 위한 단계별 실행 계획을 기술합니다. 각 단계는 테스트 주도 개발(TDD) 원칙을 따르며, 파일 단위의 점진적 변경, 테스트 코드 작성 및 검증을 포함합니다. 또한, '[Zustand-action-msw]' 패턴 준수, `shadcn` UI 컴포넌트 사용 등 기술 제약 조건을 반영합니다.

## Phase 1: 초기 데이터 구조 정의 및 상태 설정

### A. 프로젝트 데이터베이스 스키마 정의 (TDD 접근)

**목표:** 프로젝트 데이터의 영구 저장을 위한 데이터베이스 스키마를 정의하고, 애플리케이션 레벨에서 해당 스키마를 따르는 데이터 객체의 유효성을 검증하는 테스트를 우선 작성합니다.

1.  **테스트 시나리오 정의 (개념적):**
    *   Project 모델(데이터 객체) 생성 시 필수 필드(이름, 소유자 ID) 누락 검증 테스트.
    *   필드별 데이터 타입 (문자열, 숫자, 날짜, JSON, Boolean) 검증 테스트.
    *   기본값(생성/수정일, `isDeleted`) 설정 검증 테스트.
    *   *참고: 이 단계는 실제 DB 스키마 자체를 테스트하기보다, 애플리케이션 내에서 스키마 구조를 따르는 데이터 객체(예: 모델 생성 함수 또는 유효성 검사 로직)를 검증하는 데 중점을 둡니다.*

2.  **스키마 구조 정의 (TypeScript 인터페이스/타입):**
    *   `src/types/project.ts` (또는 유사 경로) 파일에 `Project` 인터페이스 또는 타입을 정의합니다.
    *   아래 명세에 따라 필드를 정의합니다.

| 필드명 | 데이터 타입 | 제약 조건 | 설명/목적 |
| :---------- | :-------------------------- | :------------------------------------------- | :---------------------------------------------- |
| `projectId` | `string` (UUID 권장) | Primary Key | 프로젝트 고유 식별자 |
| `name` | `string` | Not Null | 프로젝트 이름 |
| `ownerId` | `string` | Not Null, Foreign Key (User 테이블 참조) | 프로젝트 소유자 ID |
| `ownerNickname` | `string` (Optional) | | 소유자 닉네임 (표시용, API 응답에 포함 가정) |
| `createdAt` | `Date` (또는 `string`) | Not Null, Default: Now | 생성 일시 |
| `updatedAt` | `Date` (또는 `string`) | Not Null, Default: Now | 마지막 수정 일시 |
| `settings` | `Record<string, any>` (JSONB) | Nullable | 추후 확장성을 위한 프로젝트별 설정 |
| `isDeleted` | `boolean` | Not Null, Default: `false` | 삭제 여부 (휴지통 기능 지원) |
| `deletedAt` | `Date` (또는 `string`, Nullable) | Nullable | 삭제 일시 (휴지통 보관 기간 정책 지원) |

3.  **애플리케이션 레벨 유효성 검사 로직 구현 (선택 사항):**
    *   필요시, `Project` 데이터 객체를 생성하거나 검증하는 유틸리티 함수(예: `createProjectData`, `validateProjectData`)를 `src/utils/projectUtils.ts` 에 구현합니다. 이 함수는 정의된 타입/인터페이스를 따르는지 확인합니다.

4.  **단위 테스트 작성:**
    *   `src/types/project.test.ts` (또는 `src/utils/projectUtils.test.ts`) 파일에 1단계에서 정의한 시나리오 기반의 단위 테스트를 작성합니다. (예: Vitest, Jest 사용)
    *   유효한 데이터 객체 생성 테스트, 필수 필드 누락 시 에러 발생 테스트, 타입 불일치 시 에러 발생 테스트 등을 포함합니다.

5.  **리팩토링 및 검증:**
    *   모든 단위 테스트가 통과하는지 확인합니다.
    *   스키마 정의(타입/인터페이스)가 명확하고 요구사항을 충족하는지 검토합니다.

6.  **관련 스키마 변경 식별:**
    *   **중요:** `Card` 엔티티/테이블 스키마에 `projectId: string` (Foreign Key) 필드를 추가해야 합니다. 이 변경은 프로젝트와 카드 간의 관계를 설정하는 데 필수적이며, 후속 데이터베이스 마이그레이션 단계(V.B)에서 반영되어야 합니다. 이는 프로젝트가 카드를 '포함'한다는 개념을 관계형 데이터베이스 모델로 구현하는 표준 방식입니다.

### B. 프로젝트용 Zustand 상태 구조 정의 (TDD 접근)

**목표:** 프로젝트 데이터를 프론트엔드 상태에서 관리하기 위한 Zustand 스토어 슬라이스를 정의하고, 초기 상태 및 기본 셀렉터에 대한 테스트를 작성합니다. '[Zustand-action-msw]' 패턴을 따릅니다.

1.  **테스트 시나리오 정의:**
    *   초기 상태 검증: `projects` 배열은 비어 있어야 함, `isLoading`은 `false`, `error`는 `null`.
    *   기본 셀렉터(`selectProjects`, `selectIsLoading`, `selectError`)가 초기 상태 값을 올바르게 반환하는지 검증.
    *   `selectProjectById` 셀렉터가 특정 ID의 프로젝트를 찾거나(찾는 경우) `undefined`를 반환하는지(못 찾는 경우) 검증.

2.  **초기 상태 및 스토어 구현:**
    *   `src/stores/projectStore.ts` 파일을 생성합니다.
    *   Zustand `create` 함수를 사용하여 스토어를 정의하고, 초기 상태 (`initialState`)를 설정합니다: `{ projects:, isLoading: false, error: null, activeProjectId: null }`.
    *   `activeProjectId` 필드는 현재 선택된 프로젝트를 추적하기 위해 추가됩니다. (III.B 요구사항 지원)

3.  **기본 셀렉터 구현:**
    *   `projectStore.ts` 내 또는 별도의 셀렉터 파일에 `selectProjects`, `selectIsLoading`, `selectError`, `selectProjectById`, `selectActiveProjectId`, `selectActiveProject` (activeProjectId를 이용해 projects 배열에서 프로젝트 객체를 찾는 로직) 셀렉터를 구현합니다.

4.  **단위 테스트 작성:**
    *   `src/stores/projectStore.test.ts` 파일에 1단계 시나리오 기반의 단위 테스트를 작성합니다. (예: Vitest/Jest, `@testing-library/react`의 `renderHook`과 `act` 사용 가능)
    *   스토어 훅을 호출하고 반환된 상태와 셀렉터 결과가 예상과 일치하는지 검증합니다.

5.  **리팩토링 및 검증:**
    *   모든 단위 테스트가 통과하는지 확인합니다.
    *   초기 상태 구조와 셀렉터 로직이 정확하고 명확한지 검토합니다. 프로젝트 관련 상태를 별도 슬라이스로 분리함으로써 코드 모듈성이 향상되고, 애플리케이션 복잡도 증가 시 상태 관리가 용이해집니다. 이는 '[Zustand-action-msw]' 패턴 적용의 기반이 됩니다.

### C. 기존 카드와 초기 프로젝트 연결 로직 정의 (TDD 접근)

**목표:** 사용자가 기능 업데이트 후 처음 애플리케이션을 로드할 때, `projectId`가 없는 기존 카드들을 자동으로 생성된 기본 프로젝트에 연결하는 로직을 구현하고 테스트합니다.

1.  **테스트 시나리오 정의:**
    *   사용자에 대한 기본 프로젝트가 존재하는지 확인하는 로직 테스트 (mocked API/state action 사용).
    *   기본 프로젝트가 없을 경우, 기본 프로젝트를 생성하는 액션(`createProject`)이 호출되는지 테스트 (mocked).
    *   `projectId`가 없는 카드 목록을 가져오는 액션(`fetchCards`)이 호출되는지 테스트 (mocked).
    *   가져온 카드들의 `projectId`를 기본 프로젝트 ID로 업데이트하는 액션(`updateCard` 또는 `bulkUpdateCards`)이 호출되는지 테스트 (mocked).
    *   전체 로직이 성공적으로 완료되는 시나리오 테스트.
    *   중간 단계에서 오류 발생 시 처리 로직 테스트 (예: 프로젝트 생성 실패, 카드 업데이트 실패).

2.  **연결 로직 구현:**
    *   애플리케이션 초기화 시점(예: 최상위 컴포넌트의 `useEffect` 또는 특정 초기화 함수 내부)에 실행될 비동기 함수 (예: `associateOrphanCards`)를 `src/features/project/utils/initialization.ts` 에 구현합니다.
    *   이 함수는 다음을 수행합니다:
        *   현재 사용자의 프로젝트 목록을 가져옵니다 (`fetchProjects` 액션 호출).
        *   '기본 프로젝트'(예: "내 첫 프로젝트")가 있는지 확인합니다.
        *   없으면 `createProject` 액션을 호출하여 생성하고, 생성된 프로젝트 ID를 저장합니다.
        *   `projectId`가 `null` 또는 `undefined`인 카드 목록을 가져옵니다 (`fetchCards` 액션 호출, 필터링 옵션 필요).
        *   가져온 각 카드에 대해 `updateCard` 액션을 호출하여 `projectId`를 설정합니다. (또는 백엔드가 지원하는 경우 일괄 업데이트 액션 사용)

3.  **단위/통합 테스트 작성:**
    *   `src/features/project/utils/initialization.test.ts` 파일에 1단계 시나리오 기반의 테스트를 작성합니다.
    *   Zustand 스토어 상태를 모킹하고, `createProject`, `fetchProjects`, `fetchCards`, `updateCard` 액션들의 호출 여부 및 인자를 검증합니다. MSW를 사용하여 관련 API 호출을 모킹할 수 있습니다.
    *   *주의: 이 작업은 II.A에서 정의될 `createProject`, `fetchProjects`, `updateCard` 액션 및 해당 MSW 핸들러에 의존합니다. TDD 접근 방식에서는 이러한 의존성을 모킹하여 이 로직을 먼저 개발하고 테스트할 수 있습니다.*

4.  **리팩토링 및 검증:**
    *   테스트가 통과하는지 확인하고, 로직이 '고아 카드(orphan cards)'를 정확하게 기본 프로젝트에 연결하는지 검증합니다. 이 '마이그레이션' 단계는 기존 사용자의 데이터 일관성을 유지하고 새로운 프로젝트 구조로의 전환을 원활하게 하는 데 매우 중요합니다. 자동 연결은 사용자가 수동으로 많은 카드를 할당해야 하는 불편함을 덜어줍니다.

## Phase 2: 핵심 프로젝트 상호작용: 상태 관리 및 API 모킹

### A. 프로젝트 CRUD 액션 구현 (Zustand, TDD 접근)

**목표:** 프로젝트 생성(Create), 조회(Read - 목록/단일), 수정(Update), 삭제(Delete) 기능을 위한 비동기 Zustand 액션을 구현하고 테스트합니다. '[Zustand-action-msw]' 패턴을 엄격히 따릅니다.

**(예시: `createProject` 액션)**

1.  **테스트 시나리오 정의 (`createProject`):**
    *   액션 호출 시 올바른 API 엔드포인트 (`POST /api/projects`) 및 요청 본문으로 `fetch` (또는 HTTP 클라이언트)가 호출되는지 검증 (MSW 사용).
    *   API 호출 중 `isLoading` 상태가 `true`로 설정되고, 완료 후 `false`로 설정되는지 검증.
    *   API 호출 성공 시:
        *   반환된 새 프로젝트 데이터가 Zustand 상태의 `projects` 배열에 추가되는지 검증.
        *   `error` 상태가 `null`로 설정되는지 검증.
    *   API 호출 실패 시:
        *   `error` 상태에 오류 정보가 설정되는지 검증.
        *   `projects` 배열이 변경되지 않는지 검증.
        *   `isLoading` 상태가 `false`로 설정되는지 검증.

2.  **MSW 핸들러 정의 (개념적, II.B에서 구체화):**
    *   `POST /api/projects` 요청을 처리하고, 성공 시 새로운 프로젝트 객체(ID 포함)를 반환하거나, 실패 시 오류 응답(예: 400, 500 상태 코드)을 반환하는 MSW 핸들러를 구상합니다.

3.  **Zustand 액션 구현 (`createProject`):**
    *   `projectStore.ts` 내에 `createProject: async (projectData) => {... }` 형태의 비동기 액션을 추가합니다.
    *   `set` 함수를 사용하여 `isLoading: true`, `error: null`로 상태를 업데이트합니다.
    *   `fetch` (또는 axios 등)를 사용하여 API 엔드포인트(`POST /api/projects`)를 호출하고 `projectData`를 전송합니다.
    *   `try...catch` 블록 사용:
        *   **성공 시 (`try`):** 응답을 파싱하고, `set`을 사용하여 `projects` 배열에 새 프로젝트를 추가하고, `isLoading: false`로 설정합니다.
        *   **실패 시 (`catch`):** 오류를 잡고, `set`을 사용하여 `error` 상태를 업데이트하고, `isLoading: false`로 설정합니다.

4.  **단위 테스트 작성 (`createProject`):**
    *   `projectStore.test.ts`에 1단계 시나리오 기반의 단위 테스트를 작성합니다.
    *   MSW를 사용하여 API 응답(성공 및 실패 케이스)을 모킹합니다.
    *   액션을 호출하고(`act` 사용), 스토어 상태 변화(projects 배열, isLoading, error)를 검증합니다.

5.  **리팩토링 및 검증 (`createProject`):**
    *   테스트가 통과하는지 확인하고, 액션 로직이 명확하며 상태 업데이트가 정확한지 검토합니다.

**(반복)**: 위 TDD 사이클을 `fetchProjects`, `fetchProjectById`, `updateProject`, `deleteProject` 액션에 대해 각각 반복합니다.

*   `fetchProjects`: `GET /api/projects` 호출, 성공 시 `projects` 상태 업데이트, 로딩/에러 처리.
*   `fetchProjectById`: `GET /api/projects/:projectId` 호출, 성공 시 해당 프로젝트 정보 반환 또는 상태 업데이트 (필요시), 로딩/에러 처리.
*   `updateProject`: `PUT /api/projects/:projectId` 호출, 성공 시 `projects` 상태에서 해당 프로젝트 업데이트, 로딩/에러 처리.
*   `deleteProject`: `DELETE /api/projects/:projectId` 호출, 성공 시 `projects` 상태에서 해당 프로젝트 제거 (IV.A에서 소프트 삭제 로직으로 수정됨), 로딩/에러 처리.

이러한 CRUD 액션들을 UI 구현 전에 개발하고 테스트함으로써, 데이터 관리 로직과 프레젠테이션 로직 간의 명확한 관심사 분리를 강제합니다. 이는 UI 컴포넌트와 독립적으로 핵심 기능을 테스트할 수 있게 하며, 디버깅을 용이하게 합니다. '[Zustand-action-msw]' 패턴을 일관되게 적용하면 비동기 작업 및 상태 업데이트 처리 방식이 표준화되어 코드 예측 가능성과 유지보수성이 향상됩니다.

### B. 프로젝트 API용 MSW 모의 핸들러 설정 (TDD 접근)

**목표:** Zustand 액션이 상호작용할 모든 프로젝트 관련 API 엔드포인트에 대한 MSW(Mock Service Worker) 핸들러를 설정하여, 백엔드 없이 프론트엔드 개발 및 테스트를 가능하게 합니다.

1.  **테스트 시나리오 정의 (핸들러 동작):**
    *   각 핸들러가 시뮬레이션해야 할 동작을 명확히 합니다:
        *   `GET /api/projects`: 모의 프로젝트 목록 반환 (소프트 삭제된 항목 제외 필터링 포함 - IV.A 요구사항).
        *   `POST /api/projects`: 성공 시 고유 ID가 할당된 새 모의 프로젝트 객체 반환, 실패 시 오류 응답.
        *   `GET /api/projects/:projectId`: 특정 ID의 모의 프로젝트 반환, 찾을 수 없으면 404 오류.
        *   `PUT /api/projects/:projectId`: 성공 시 업데이트된 모의 프로젝트 반환, 실패 시 오류 응답.
        *   `DELETE /api/projects/:projectId`: 성공 시 200/204 상태 코드 반환 (소프트 삭제 시뮬레이션 - IV.A 요구사항).
    *   오류 시나리오(예: 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Internal Server Error) 시뮬레이션을 포함합니다.

2.  **MSW 핸들러 구현:**
    *   `src/mocks/handlers.js` (또는 `handlers/projectHandlers.js` 등 구조화된 파일)에 위 엔드포인트들에 대한 MSW 요청 핸들러(`rest.get`, `rest.post`, `rest.put`, `rest.delete`)를 작성합니다.
    *   메모리 내 모의 데이터 저장소(예: 배열)를 사용하여 상태를 유지하고 CRUD 작업을 시뮬레이션합니다.
    *   성공 응답뿐만 아니라 다양한 오류 응답(상태 코드, 메시지)을 반환하는 로직을 포함하여 에러 핸들링 테스트를 지원합니다.

3.  **핸들러 통합:**
    *   테스트 환경(예: Vitest/Jest 설정 파일의 `setupFilesAfterEnv`)에서 MSW 서버(`setupServer`)가 핸들러를 사용하도록 설정합니다.
    *   개발 환경에서 사용하려면 `src/mocks/browser.js`에 핸들러를 등록하고 워커(`setupWorker`)를 시작하는 코드를 애플리케이션 진입점(예: `main.tsx`)에 추가합니다.

4.  **통합 테스트 (액션 <-> MSW):**
    *   II.A에서 작성한 Zustand 액션 단위 테스트가 이 단계에서 구현된 MSW 핸들러를 실제로 사용하게 됩니다. 이 테스트들은 액션이 MSW가 제공하는 모의 응답을 올바르게 처리하는지 검증하는 통합 테스트 역할을 합니다.

5.  **리팩토링 및 검증:**
    *   핸들러가 정확하게 정의되었는지, 예상된 요청/응답을 처리하는지 확인합니다.
    *   Zustand 액션 테스트가 이 모의 핸들러를 사용하여 모두 통과하는지 확인합니다. 견고한 MSW 핸들러는 효과적인 프론트엔드 TDD의 핵심 요소로, 백엔드 개발 일정과 프론트엔드 개발을 분리하고 비동기 로직의 예측 가능한 테스트를 가능하게 합니다. 특히 오류 상태를 충실히 시뮬레이션하는 것은 애플리케이션의 오류 처리 로직을 철저히 검증하는 데 중요합니다.

## Phase 3: 사용자 인터페이스 구현: 표시 및 기본 상호작용

### A. ProjectToolbar 기능 확장 (이름/소유자 표시) (TDD 접근)

**목표:** 기존 `ProjectToolbar` 컴포넌트를 수정하여 정적 텍스트 대신 현재 활성 프로젝트의 이름과 소유자 닉네임을 표시합니다. `shadcn` 컴포넌트를 사용하고 User Rules를 준수합니다.

1.  **테스트 시나리오 정의 (`@testing-library/react` 사용):**
    *   활성 프로젝트가 Zustand 상태에 선택되어 있을 때 (스토어 모킹) 컴포넌트가 올바르게 렌더링되는지 테스트.
    *   모킹된 상태로부터 가져온 프로젝트 이름과 소유자 닉네임 ("{프로젝트 이름} - {소유자 닉네임}" 형식)을 표시하는지 테스트.
    *   활성 프로젝트가 없을 때 기본 상태(예: "선택된 프로젝트 없음")를 표시하는지 테스트.
    *   (선택 사항) 프로젝트 데이터를 가져오는 동안 로딩 상태 표시기(예: 스켈레톤 컴포넌트)를 표시하는지 테스트.

2.  **컴포넌트 로직 구현:**
    *   `src/components/ProjectToolbar.tsx` 파일을 수정합니다.
    *   Zustand 훅을 사용하여 현재 활성 프로젝트 데이터를 가져옵니다 (예: `const activeProject = useProjectStore(selectActiveProject);`). `selectActiveProject` 셀렉터는 `activeProjectId`를 기반으로 `projects` 배열에서 전체 프로젝트 객체를 반환해야 합니다.
    *   프로젝트 데이터에 `ownerNickname`이 포함되어 있다고 가정합니다. (만약 아니라면, I.A 스키마 정의 또는 II.A `fetchProject` 액션 수정 필요).
    *   `activeProject`가 존재하면 "{activeProject.name} - {activeProject.ownerNickname}" 문자열을 렌더링하고, 없으면 기본 텍스트를 렌더링합니다.
    *   텍스트 표시에 적절한 `shadcn` 컴포넌트(예: 단순 `<span>`, `<p>` 또는 `Heading`)를 사용하고 필요에 따라 스타일링합니다.

3.  **단위 테스트 작성:**
    *   `src/components/ProjectToolbar.test.tsx` 파일에 1단계 시나리오 기반의 단위 테스트를 작성합니다.
    *   Zustand 스토어를 모킹하여 다양한 상태(활성 프로젝트 있음, 없음, 로딩 중)를 제공합니다.
    *   `render` 함수로 컴포넌트를 렌더링하고, `screen` 객체를 사용하여 표시되는 텍스트를 검증합니다.

4.  **리팩토링 및 검증:**
    *   모든 테스트가 통과하는지 확인합니다.
    *   컴포넌트가 다양한 상태에 따라 올바르게 표시되는지 확인합니다.
    *   가능한 경우 `shadcn` 컴포넌트 또는 기본 HTML 요소만 사용했는지 확인합니다. 이 UI 변경은 간단해 보이지만 UI 컴포넌트와 상태 관리 계층(Zustand) 간의 정확한 연동을 요구합니다. TDD는 다양한 조건(프로젝트 로드됨, 로드 안됨 등)에서 이 연동이 올바르게 작동함을 보장합니다. 소유자 닉네임 표시는 프로젝트 데이터 구조 또는 관련 API 응답에 닉네임 정보가 포함되도록 하는 의존성이 있음을 인지해야 합니다.

### B. 프로젝트 선택/목록 UI 구현 (TDD 접근)

**목표:** 사용자의 프로젝트 목록을 보여주고 선택할 수 있는 UI 컴포넌트(예: 툴바 내 드롭다운 메뉴, 별도 모달/페이지)를 구현합니다. 프로젝트 선택 시 Zustand 상태의 '활성 프로젝트'를 업데이트해야 합니다. `shadcn` 컴포넌트를 사용합니다.

1.  **테스트 시나리오 정의 (`@testing-library/react` 사용):**
    *   컴포넌트 마운트 시 (또는 메뉴 열릴 때) `fetchProjects` 액션을 호출하여 프로젝트 목록을 가져오는지 테스트 (액션/스토어 모킹).
    *   모킹된 Zustand 스토어의 데이터(`projects` 배열)를 기반으로 프로젝트 목록을 렌더링하는지 테스트.
    *   목록에서 특정 프로젝트를 클릭하면 해당 프로젝트 ID로 '활성 프로젝트'를 설정하는 액션(`setActiveProject`)이 호출되는지 테스트 (액션 모킹).
    *   로딩 상태(표시기 표시) 및 오류 상태(메시지 표시)를 올바르게 처리하는지 테스트.
    *   예상되는 `shadcn` 컴포넌트(예: `DropdownMenu`, `DropdownMenuItem`, `Command`, `Dialog`)를 사용하여 렌더링하는지 테스트.

2.  **컴포넌트 로직 구현:**
    *   새 컴포넌트 파일(예: `src/components/ProjectSelector.tsx`)을 생성합니다.
    *   Zustand 훅을 사용하여 프로젝트 목록(`selectProjects`) 및 로딩/오류 상태(`selectIsLoading`, `selectError`)를 가져옵니다.
    *   `useEffect` 훅을 사용하여 컴포넌트 마운트 시 (또는 필요할 때) `fetchProjects` 액션을 트리거합니다.
    *   `projects` 배열을 매핑하여 `shadcn` 컴포넌트(예: `DropdownMenuTrigger` 내부에 `DropdownMenuContent`를 포함하고 그 안에 `DropdownMenuItem`들, 또는 `DialogTrigger` 내부에 `DialogContent`와 `Command` 컴포넌트 조합)를 사용하여 목록 항목을 렌더링합니다.
    *   각 목록 항목에 `onClick` 핸들러를 추가하여, 클릭 시 `setActiveProject(project.projectId)` Zustand 액션을 호출하도록 합니다.

3.  **단위 테스트 작성:**
    *   `src/components/ProjectSelector.test.tsx` 파일에 1단계 시나리오 기반의 단위 테스트를 작성합니다.
    *   Zustand 스토어 및 관련 액션(`fetchProjects`, `setActiveProject`)을 모킹합니다.
    *   `@testing-library/user-event`를 사용하여 사용자 상호작용(예: 메뉴 열기, 항목 클릭)을 시뮬레이션하고, 액션 호출 및 상태 변경(간접적으로 확인 가능)을 검증합니다.

4.  **리팩토링 및 검증:**
    *   모든 테스트가 통과하는지 확인합니다.
    *   UI가 `shadcn` 컴포넌트를 사용하여 올바르게 렌더링되고 상호작용하는지 확인합니다.
    *   프로젝트 선택 시 상태가 (`activeProjectId`를 통해) 올바르게 업데이트되는지 확인합니다. `shadcn` 컴포넌트 선택(Dropdown vs. Dialog/Command)은 사용자 경험과 구현 복잡성에 영향을 미칩니다. 초기에는 간단한 `DropdownMenu`가 적합할 수 있으나, 프로젝트 수가 많아지면 검색 기능이 있는 `Dialog` + `Command` 방식이 장기적으로 더 유용할 수 있습니다. 이 컴포넌트는 상태에 '활성 프로젝트' 개념(`activeProjectId`)을 도입하며, 이는 `ProjectToolbar`에서도 사용됩니다. 따라서 `projectStore`에 `activeProjectId` 상태 필드와 이를 관리하는 `setActiveProject` 액션 및 `selectActiveProject` 셀렉터 구현이 필수적입니다.

## Phase 4: 프로젝트 생명주기 관리: 삭제 및 복구

### A. 프로젝트 삭제 로직 구현 (소프트 삭제/휴지통) (TDD 접근)

**목표:** 프로젝트 삭제 기능을 구현하되, 영구 삭제 대신 '삭제됨'으로 표시(소프트 삭제)하고 삭제 타임스탬프를 설정하여 '휴지통' 기능을 지원합니다. `deleteProject` Zustand 액션과 관련 MSW 핸들러를 수정합니다.

1.  **테스트 시나리오 정의:**
    *   `deleteProject` 액션이 올바른 API 엔드포인트 (`DELETE /api/projects/:projectId`)를 호출하는지 테스트.
    *   `DELETE /api/projects/:projectId` 요청에 대한 MSW 핸들러가 소프트 삭제(예: DB에서 `isDeleted: true`, `deletedAt: now()` 설정)를 시뮬레이션하는지 테스트.
    *   `deleteProject` 액션이 성공적인 API 응답을 받으면, Zustand 상태에서 해당 프로젝트를 **주 목록에서 제거**하는지 테스트 (삭제된 항목은 별도 관리 또는 필터링).
    *   삭제 액션의 오류 처리(API 실패 시 상태 변경 없음, 에러 상태 설정)를 테스트.
    *   **중요:** `fetchProjects` 액션 (및 관련 MSW 핸들러)이 기본적으로 `isDeleted: true`인 프로젝트를 **제외**하고 목록을 반환하도록 수정되었는지 테스트.

2.  **MSW 핸들러 업데이트:**
    *   `DELETE /api/projects/:projectId` 핸들러를 수정하여, 메모리 내 모의 데이터에서 해당 프로젝트의 `isDeleted` 플래그를 `true`로, `deletedAt`을 현재 시간으로 설정하도록 변경합니다. (실제 삭제 대신)
    *   `GET /api/projects` 핸들러를 수정하여, 반환하는 목록에서 `isDeleted: true`인 프로젝트를 필터링하도록 변경합니다.

3.  **Zustand 액션 업데이트 (`deleteProject`):**
    *   `projectStore.ts`의 `deleteProject` 액션을 수정합니다.
    *   API 호출 (`DELETE /api/projects/:projectId`)은 그대로 수행합니다.
    *   성공 시, `set` 함수를 사용하여 `projects` 배열에서 해당 `projectId`를 가진 프로젝트를 **제거**합니다. (UI에 더 이상 표시되지 않도록)

4.  **Zustand 액션/셀렉터 업데이트 (`fetchProjects` / `selectProjects`):**
    *   `fetchProjects` 액션 자체는 변경될 필요가 없을 수 있습니다 (백엔드/MSW가 이미 필터링된 데이터를 반환하므로).
    *   하지만 `selectProjects` 셀렉터 또는 데이터를 사용하는 컴포넌트 레벨에서 만약을 대비해 `isDeleted`가 `false`인 항목만 필터링하는 로직을 추가하는 것을 고려할 수 있습니다.

5.  **단위 테스트 작성/업데이트:**
    *   `projectStore.test.ts`에서 `deleteProject` 및 `fetchProjects` 액션에 대한 테스트를 업데이트하거나 새로 작성합니다.
    *   수정된 MSW 핸들러와의 상호작용을 테스트하고, 상태 변화(프로젝트 제거, 목록 필터링) 및 오류 처리를 검증합니다.

소프트 삭제 구현은 삭제 로직(`deleteProject`)과 조회 로직(`fetchProjects`) 모두에 변경을 요구합니다. 삭제된 프로젝트는 일반 목록에 나타나지 않아야 하기 때문입니다. 사용자가 명시한 "90일 보관" 정책은 일반적으로 백엔드에서 주기적인 작업(예: cron job)을 통해 `deletedAt`이 90일 이상 지난 레코드를 영구 삭제하는 방식으로 구현됩니다. 프론트엔드는 `isDeleted`와 `deletedAt`을 올바르게 설정하여 이 백엔드 프로세스를 지원하는 역할을 합니다.

### B. 프로젝트 삭제 UI 구현 (TDD 접근)

**목표:** 프로젝트 삭제 액션을 트리거하는 버튼 또는 메뉴 항목(예: 프로젝트 선택 UI 내, 프로젝트 설정 메뉴)을 추가하고, 사용자 실수를 방지하기 위한 확인 단계를 포함합니다. `shadcn` 컴포넌트를 사용합니다.

1.  **테스트 시나리오 정의 (`@testing-library/react` 사용):**
    *   각 프로젝트 항목 옆(또는 적절한 위치)에 삭제 버튼/아이콘이 렌더링되는지 테스트.
    *   삭제 버튼 클릭 시 `shadcn`의 `AlertDialog` 컴포넌트를 사용한 확인 대화 상자가 나타나는지 테스트.
    *   확인 대화 상자에서 '삭제 확인' 버튼 클릭 시 올바른 `projectId`와 함께 `deleteProject` Zustand 액션이 호출되는지 테스트 (액션 모킹).
    *   확인 대화 상자에서 '취소' 버튼 클릭 시 아무런 액션도 호출되지 않는지 테스트.
    *   사용된 버튼, 메뉴 항목, 대화 상자가 `shadcn` 컴포넌트(`Button`, `DropdownMenuItem`, `AlertDialog` 등)인지 테스트.

2.  **컴포넌트 로직 구현:**
    *   프로젝트 목록 항목(예: `ProjectSelector.tsx` 내부) 또는 프로젝트 메뉴에 삭제 버튼/아이콘(예: `lucide-react`의 `Trash2` 아이콘 사용)을 추가합니다.
    *   `shadcn`의 `AlertDialog` 관련 컴포넌트(`AlertDialog`, `AlertDialogTrigger`, `AlertDialogContent`, `AlertDialogHeader`, `AlertDialogTitle`, `AlertDialogDescription`, `AlertDialogFooter`, `AlertDialogCancel`, `AlertDialogAction`)를 사용하여 확인 대화 상자를 구성합니다.
    *   삭제 버튼/아이콘을 `AlertDialogTrigger`로 감쌉니다.
    *   `AlertDialogAction` 컴포넌트의 `onClick` 핸들러에 `deleteProject(project.projectId)` 액션 호출 로직을 연결합니다.

3.  **단위 테스트 작성:**
    *   관련 컴포넌트 테스트 파일(예: `ProjectSelector.test.tsx`)에 1단계 시나리오 기반의 단위 테스트를 작성합니다.
    *   `deleteProject` 액션을 모킹합니다.
    *   `@testing-library/user-event`를 사용하여 삭제 트리거 클릭, 확인 대화 상자의 확인/취소 버튼 클릭을 시뮬레이션하고, 액션 호출 여부 및 인자를 검증합니다.

4.  **리팩토링 및 검증:**
    *   모든 테스트가 통과하는지 확인합니다.
    *   확인 대화 상자 플로우가 올바르게 작동하고, 의도한 대로 액션이 호출되는지 확인합니다.
    *   `shadcn` 컴포넌트가 적절히 사용되었는지 확인합니다. 삭제와 같은 파괴적인 작업에는 `AlertDialog`를 사용한 명시적인 확인 단계가 필수적입니다. 이는 사용자의 실수를 방지하고, 휴지통 기능이 있더라도 데이터 손실에 대한 불안감을 줄여 사용자 경험을 향상시킵니다. 삭제 버튼의 위치는 사용자의 작업 흐름에 영향을 미치므로, Phase 1에서는 사용자의 요구사항에 따라 프로젝트 선택/목록 UI 내에 배치하는 것이 적절해 보입니다.

## Phase 5: 통합 및 검증

### A. 엔드-투-엔드(E2E) 테스트 시나리오 정의 (개념적)

**목표:** 구현된 모든 기능(UI, 상태 관리, 모의 API)이 전체 워크플로우 관점에서 올바르게 함께 작동하는지 확인하기 위한 주요 시나리오를 정의하고, 개발 환경(MSW 사용)에서 수동으로 테스트합니다.

1.  **시나리오 정의:**
    *   **시나리오 1 (프로젝트 생성 및 표시):**
        1.  새 프로젝트 생성 UI를 통해 프로젝트를 생성합니다.
        2.  프로젝트 선택 목록에 새 프로젝트가 나타나는지 확인합니다.
        3.  새 프로젝트를 선택합니다.
        4.  ProjectToolbar가 올바른 이름과 소유자 닉네임으로 업데이트되는지 확인합니다.
    *   **시나리오 2 (초기 카드 연동 검증):**
        1.  (해당되는 경우) `projectId`가 없는 기존 카드가 있는 상태로 애플리케이션을 로드합니다.
        2.  기본 프로젝트("내 첫 프로젝트" 등)가 자동으로 생성되었는지 확인합니다 (프로젝트 목록 확인).
        3.  기존 카드들이 이 기본 프로젝트에 연결되었는지 확인합니다 (상태 검사 또는 임시 UI 요소 필요 가능).
    *   **시나리오 3 (프로젝트 삭제):**
        1.  특정 프로젝트를 선택합니다.
        2.  해당 프로젝트의 삭제 버튼을 클릭하고 확인 대화 상자에서 삭제를 확인합니다.
        3.  프로젝트 목록에서 해당 프로젝트가 사라지는지 확인합니다.
        4.  ProjectToolbar가 업데이트되는지 확인합니다 (예: "선택된 프로젝트 없음" 표시 또는 다른 프로젝트 자동 선택).
    *   **시나리오 4 (오류 처리):**
        1.  브라우저 개발자 도구 또는 MSW 오버라이드를 사용하여 프로젝트 조회/생성/삭제 API 호출 시 강제로 오류를 발생시킵니다.
        2.  UI에 적절한 오류 메시지나 상태(예: 로딩 중 멈춤 없음)가 표시되는지 확인합니다.
        3.  오류 발생 후 애플리케이션 상태가 손상되지 않았는지 확인합니다 (예: 목록이 비정상적으로 비워지지 않음).

2.  **실행:**
    *   개발 환경에서 MSW가 활성화된 상태로 위 시나리오들을 수동으로 실행합니다.

3.  **검증:**
    *   각 단계의 결과를 기록하고, 버그나 예상과 다른 동작을 식별하여 수정합니다. 단위/통합 테스트가 개별 부품을 검증하는 반면, 이러한 수동 E2E 테스트는 여러 컴포넌트와 모듈 간의 상호작용에서 발생하는 문제를 찾는 데 중요합니다. 실제 데이터베이스 통합 전에 이 단계를 수행하면, 이후 발생할 수 있는 문제의 원인을 프론트엔드 로직 문제와 데이터베이스/백엔드 문제로 분리하여 디버깅하는 데 도움이 됩니다.

### B. Supabase 통합 검증

**목표:** 애플리케이션이 실제 Supabase 백엔드(개발/스테이징 및 프로덕션용)에 연결되도록 구성하고, 프로젝트 CRUD 작업이 실제 데이터베이스에 대해 올바르게 작동하는지 검증합니다.

1.  **데이터베이스 마이그레이션 실행:**
    *   I.A에서 정의된 Project 스키마를 Supabase 데이터베이스에 적용합니다. Supabase CLI 마이그레이션 또는 Prisma Migrate와 같은 도구를 사용합니다.
    *   **매우 중요:** `cards` 테이블에 `projectId` 외래 키(Foreign Key) 열을 추가하는 마이그레이션을 포함해야 합니다. 이 열은 `projects` 테이블의 `projectId`를 참조해야 하며, 필요에 따라 인덱스를 생성합니다. `ON DELETE` 정책(예: `SET NULL` 또는 `CASCADE`)도 고려해야 합니다.

2.  **백엔드 API 구현 확인:**
    *   실제 백엔드 API 엔드포인트(`https://<your-supabase-url>/rest/v1/projects` 또는 Supabase Edge Functions 등)가 구현되어 있는지 확인합니다. 이 API는 Supabase 데이터베이스 테이블과 상호작용하며 정의된 스키마 및 로직(소프트 삭제 포함)을 따라야 합니다. (백엔드 구현은 이 문서의 범위를 벗어나지만, 프론트엔드 통합의 필수 전제 조건입니다.)

3.  **프론트엔드 구성 업데이트:**
    *   애플리케이션의 환경 변수 (`.env` 파일 등) 또는 구성 파일을 업데이트하여 Supabase API URL (`SUPABASE_URL`) 및 익명 키 (`SUPABASE_ANON_KEY`)를 설정합니다.
    *   Supabase 클라이언트 초기화 코드가 올바른지 확인합니다.
    *   **중요:** 이 테스트 단계에서는 MSW를 비활성화해야 합니다. (예: 개발 환경 시작 스크립트 또는 조건부 로직 사용)

4.  **테스트 (수동/자동):**
    *   V.A에서 정의한 E2E 시나리오를 이번에는 실제 Supabase 백엔드와 상호작용하면서 다시 실행합니다.
    *   **(선택 사항이지만 권장):** MSW를 우회하고 실제 개발/스테이징 Supabase 인스턴스에 대해 기본적인 CRUD 작업을 수행하는 자동화된 통합 테스트(예: Vitest/Jest 사용)를 작성합니다. 이는 API 계약 및 실제 DB 상호작용을 지속적으로 검증하는 데 도움이 됩니다.

5.  **검증:**
    *   애플리케이션 UI와 상태 관리 로직을 통해 Supabase 데이터베이스에서 프로젝트가 성공적으로 생성, 조회, 선택, 수정, 소프트 삭제되는지 확인합니다.
    *   I.C에서 정의한 기존 카드 연결 로직이 마이그레이션 스크립트 또는 초기화 로직을 통해 실제 데이터베이스에 올바르게 적용되었는지 확인합니다. 실제 백엔드와의 통합은 네트워크 문제, 데이터베이스 권한, API 구현 불일치, CORS 오류 등 새로운 유형의 문제를 발생시킬 수 있습니다. 특히, 기존 카드에 `projectId`를 할당하는 작업(I.C)은 배포 시점에 주의 깊게 관리되어야 합니다. 스키마 변경이 적용된 후, 사용자가 새로운 기능을 활발히 사용하기 전에 프로덕션 데이터베이스에 대해 일회성 마이그레이션 스크립트를 실행하는 것이 안전하고 효율적인 접근 방식일 수 있습니다.

## 결론 및 권장 사항

본 실행 계획은 'Project' 기능 도입을 위한 체계적이고 테스트 가능한 접근 방식을 제공합니다. 각 단계는 TDD 원칙과 명시된 기술 제약 조건을 준수하도록 설계되었습니다.

**주요 권장 사항:**

1.  **점진적 구현 및 테스트:** 계획된 순서대로 각 작업을 진행하고, 각 단계 완료 후 해당 기능이 TDD를 통해 충분히 검증되었는지 확인합니다. 이는 오류를 조기에 발견하고 수정하는 데 도움이 됩니다.
2.  **의존성 관리:** `Card` 스키마 변경, `ownerNickname` 데이터 처리, 기존 카드 연결 로직 실행 시점 등 식별된 의존성 및 결정 사항을 명확히 하고 진행합니다.
3.  **백엔드 협업:** Supabase 스키마 마이그레이션, 백엔드 API 구현(특히 소프트 삭제 로직), 기존 카드 연결을 위한 마이그레이션 스크립트 실행 등은 백엔드 담당자와 긴밀한 협업이 필요합니다.
4.  **`shadcn` 활용:** UI 구현 시 `shadcn` 컴포넌트를 적극적으로 활용하되, 요구사항에 맞는 최적의 컴포넌트를 선택하고 필요시 커스터마이징합니다. (`AlertDialog` 사용 등 UX 고려)
5.  **E2E 검증 철저:** 단위/통합 테스트 외에도 정의된 E2E 시나리오를 통해 전체 사용자 흐름을 MSW 환경과 실제 Supabase 환경 모두에서 철저히 검증하여 최종 품질을 확보합니다.

이 계획을 따르면 Cursor Agent는 요구사항을 충족하는 안정적이고 유지보수 가능한 'Project' 기능을 효율적으로 구현할 수 있을 것입니다.