---
description: 
globs: 
alwaysApply: false
---
**프로젝트 개념 도입 + DB 리펙토링**

***개념***
User me +-> Project 1  +- card 1, 2, 3, 4      <-- [share the cards/projects] --- User Z
        +              +- tree & node info
        +              +- project info
        +         
        +-> Project 2  +- card a, b, c, q
                       +- tree & node info
                       +- project info

**전제**
- '[Zustand-action-msw]' 규칙을 준수하여 Zustand action 기반 커맨드 패턴 구현 
- UI는 반드시 shadcn 컴포넌트를 사용. shadcn 컴포넌트로 만들 수 없는 경우만 나에게 물어보고 별도 구현.
- 모든 변경은 User Rules를 준수하고, 테스트 가능해야 함

**Phase 1: UI 초기 개발**            
1.  **ProjectToolbar 기능 확장** ProjectToolbar에 "프로젝트 이름"이란 static text 대신 "{프로젝트 이름} - {작성자}" 표시. 작성자는 user nickname.
2.  **프로젝트 스키마 작성:** 
  - [ ] 프로젝트 이름
  - [ ] 소유자 
  - [ ] 생성일
  - [ ] 수정일
  - [ ] 프로젝트 uid
  - [ ] 프로젝트 설정 정보
  - [ ] 프로젝트 카드 배열
  - [ ] 기타 필요한 데이터 
  - [ ] 지금의 카드는 프로젝트 정보를 오늘 생성한 것으로 설정해서 생성하고 프로젝트에 추가
3.  **프로젝트 UI 구현:**  
  - [ ] ProjectToolbar에 프로젝트 이름 표시
  - [ ] 프로젝트 툴바 -> 메뉴에 프로젝트 정보 수정.   

4.  **소유자별 프로젝트 선택 화면 구현:**  
  - [ ] 프로젝트 선택 화면
  - [ ] 프로젝트 삭제 
  - [ ] 프로젝트 삭제하면 카드는 어떻게 해야 하지... 아마 전체 삭제. 단, trashcan으로 이동. (90일 보관)

5.  **DB 설정**  
  - [ ] 로컬 서버 저장 테스트 
  - [ ] 프로덕션 빌드 -> supabase DB 테스트 