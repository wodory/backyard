---
description: 
globs: 
alwaysApply: false
---
---
description: 지정된 폴더 내 파일들의 Vitest 라인 및 브랜치 테스트 커버리지를 90% 이상으로 높입니다.
globs: # 에이전트가 이 파일을 어떻게 사용하는지에 따라 조정 필요. 테스트 파일 대상 지정?
  - "**/*.{test.ts,test.tsx}"
  - "**/*.{ts,tsx}"
alwaysApply: false
---

## 작업: `{target_folder}` 폴더의 라인 및 브랜치 커버리지 90% 달성

**목표:** `{target_folder}` 디렉토리 (모든 하위 디렉토리 포함) 내 관련 파일들의 Vitest 테스트 **라인 및 브랜치 커버리지**를 **최소 90%**로 높입니다.

**컨텍스트:**
*   `yarn test run --coverage {target_folder}` 명령으로 생성된 최신 Vitest 커버리지 리포트(또는 전체 리포트)를 기반으로 작업합니다.
*   테스트 프레임워크는 Vitest와 `@testing-library/react`를 사용합니다.
*   프로젝트 규칙, 특히 모킹(`vi.mock`, MSW) 및 테스트 구조(`[package]`, `[zustand-action-msw]` 등)에 관한 규칙을 준수해야 합니다.

**지시사항:**

1.  **저조한 커버리지 파일 식별:**
    *   최신 Vitest 커버리지 리포트(`coverage/index.html` 또는 JSON 출력)를 분석합니다.
    *   `{target_folder}` 내에서 **Branch coverage %** 가 90% 미만인 모든 `.ts` 및 `.tsx` 파일을 식별합니다 (테스트 파일, `.d.ts` 등 제외).
    *   식별된 각 파일에 대해, 리포트에서 커버되지 않은 브랜치로 표시된 라인 번호(종종 'I' 또는 'E'로 표시됨)를 목록으로 작성합니다.

2.  **각 저조 파일에 대한 테스트 케이스 추가/개선 (반복 작업):**
    *   **파일 선택:** 1단계에서 식별된 파일 중 하나를 선택합니다 (예: `{target_folder}/example.ts`).
    *   **미커버 브랜치 분석:** 커버되지 않은 라인 번호의 소스 코드를 검토합니다. 구체적으로 어떤 조건(`if`/`else`, `&&`/`||` 단축 평가, 옵셔널 체이닝 `?.`, null 병합 `??`, `switch` 케이스, 루프 조건, 오류 처리 `try`/`catch`)이 테스트되지 않았는지 파악합니다.
    *   **테스트 작성/수정:**
        *   해당 파일의 테스트 파일(예: `{target_folder}/example.test.ts`)을 찾거나 생성합니다.
        *   커버되지 않은 브랜치에 해당하는 코드 경로를 실행하는 새로운 `test` 또는 `it` 블록을 추가하거나 기존 테스트를 수정합니다.
        *   **시나리오 고려:**
            *   **조건부 경로:** `if`는 커버되었지만 `else`는 아닌 경우, `else` 조건을 강제하는 테스트 케이스를 추가합니다. `&&` 및 `||`의 양쪽 경로를 테스트합니다.
            *   **오류 처리:** `catch` 블록이나 특정 오류 처리 로직을 트리거하는 조건을 시뮬레이션합니다. `vi.fn().mockRejectedValue(...)` 또는 MSW 오류 응답을 사용합니다.
            *   **상태/Prop 변형:** 분기 로직에 영향을 미치는 다른 입력 props 또는 초기 상태 값으로 컴포넌트/함수가 어떻게 동작하는지 테스트합니다.
            *   **Nullish/Optional 경로:** `?.` 또는 `??`가 정의된 값과 `null`/`undefined` 값 모두로 평가되는 경우를 테스트합니다(이것이 분기를 제어하는 경우).
            *   **루프:** 조기 종료될 수 있는 루프 조건이나 내부 조건이 있는 루프 본문이 관련 데이터로 테스트되었는지 확인합니다.
    *   **모킹 활용:** `vi.mock`, `vi.spyOn` 또는 MSW(`server.use()`로 특정 핸들러 사용)를 사용하여 테스트 대상 단위를 격리하고 의존성(API 호출, DB 접근, 타이머, 다른 모듈)을 제어합니다.
    *   **명확한 이름 지정:** 각 테스트 케이스의 목적(어떤 브랜치를 커버하는지)을 명확히 설명하는 이름을 사용합니다 (예: `it('API 호출 실패 시 오류 메시지를 정상적으로 표시해야 함')`).

3.  **모든 파일에 대해 반복:** `{target_folder}` 내에서 1단계에서 식별된 *모든* 파일에 대해 2단계 작업을 반복합니다.

4.  **커버리지 확인 및 개선:**
    *   테스트 추가 후, 커버리지 명령을 다시 실행합니다: `yarn test run --coverage {target_folder}`.
    *   업데이트된 커버리지 리포트에서 `{target_folder}` 내 파일들의 라인 및 브랜치 커버리지를 확인합니다.
    *   여전히 90% 미만인 파일이 있다면, 해당 파일의 커버되지 않은 브랜치를 다시 분석하고 더 구체적인 테스트 케이스를 추가하는 2단계를 반복합니다.
    *   폴더 내 모든 관련 파일의 라인 및 브랜치 커버리지가 90% 목표를 달성할 때까지 반복합니다.

**중요 참고 사항:**
*   단순히 커버리지 비율을 기계적으로 높이는 것이 아니라, 각 브랜치의 **의도된 로직**을 검증하는 **의미 있는 테스트**를 작성하는 데 집중해야 합니다.
*   새로 작성하거나 수정한 테스트가 기존 프로젝트의 테스트 규약 및 규칙(`[package]`, `[zustand-action-msw]` 등)을 준수하는지 확인해야 합니다.
*   만약 소스 코드를 테스트 가능하게 만들기 위해 **상당한 리팩토링**이 *필수적*이라면, **작업을 중단**하고 검토를 위해 이 필요성을 보고해야 합니다 (`[package]` 규칙 참조).