---
description: 
globs: 
alwaysApply: false
---
알겠습니다. 각 단계마다 테스트 작성 태스크를 상세하게 추가하고, 전체적으로 커맨드 기반의 명확한 지시 스타일을 유지하도록 Tasklist를 수정했습니다.

---

**Tasklist: "프로젝트" 기능 단계적 추가 (커맨드 기반)**

**목표:** 사용자가 여러 "프로젝트"를 생성하고 관리하며, 각 프로젝트별로 카드를 분리하여 관리할 수 있는 기능을 구현합니다. 모든 단계에서 테스트를 작성하여 안정성을 확보합니다.

**사전 준비:**

*   **CMD:** `git checkout -b feature/project-management` (새 브랜치 생성)
*   **CMD:** (필요시) 현재 코드베이스 백업 수행

---

**1단계: 데이터 모델링 및 스키마 정의**

*   **목표:** "프로젝트" 데이터베이스 스키마 정의 및 마이그레이션.
*   **작업:**
    1.  **수정:** `prisma/schema.prisma` 파일 - 아래 명세에 따라 `Project` 모델 추가 및 `Card`, `User` 모델 수정.
        *   **`Project` 모델:**
            ```prisma
            model Project {
              id        String   @id @default(uuid())
              name      String
              ownerId   String
              createdAt DateTime @default(now())
              updatedAt DateTime @updatedAt
              owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
              cards     Card[]
            }
            ```
        *   **`Card` 모델 수정:**
            ```prisma
            model Card {
              // ... 기존 필드 ...
              projectId String
              project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
            }
            ```
        *   **`User` 모델 수정:**
            ```prisma
            model User {
              // ... 기존 필드 ...
              projects Project[]
            }
            ```
    2.  **실행:** 터미널 명령어
        ```bash
        npx prisma migrate dev --name add-project-model
        ```
        *   **주의:** 마이그레이션 중 발생하는 모든 오류를 해결할 것.
    3.  **실행:** (Supabase 타입 생성 스크립트 사용 시) Supabase 타입 업데이트 명령어 실행.
        ```bash
        # 예시: npx supabase gen types typescript ... > src/types/supabase.ts
        ```
    4.  **업데이트:** `src/types/supabase.ts` 파일 - 변경된 타입 정의 반영 확인.
*   **테스트 작성 (1단계):**
    *   **목표:** Prisma 스키마 변경 사항 검증 (이 단계에서는 자동화된 단위 테스트보다 수동 검증이 일반적).
    *   **작업:**
        1.  **실행:** `npx prisma studio`
        2.  **확인:** Prisma Studio에서 `Project` 테이블 존재 여부, `Card` 테이블에 `projectId` 컬럼 추가 여부, `User`와 `Project`, `Project`와 `Card` 간 관계 설정 여부 확인.
*   **검증:**
    *   마이그레이션 성공 확인.
    *   데이터베이스 스키마 변경 사항 수동 확인.

---

**2단계: 전역 상태 관리 (Zustand)**

*   **목표:** 프로젝트 관련 전역 상태 및 액션(`useAppStore`) 정의.
*   **작업:**
    1.  **수정:** `src/store/useAppStore.ts` 파일 - 아래 명세에 따라 `AppState` 인터페이스 및 스토어 구현 확장.
        *   **`AppState` 추가:**
            ```typescript
            interface AppState {
              // ... 기존 상태 ...
              currentProjectId: string | null;
              projects: Array<{ id: string, name: string }>;
              isLoadingProjects: boolean;

              setCurrentProjectId: (projectId: string | null) => void;
              setProjects: (projects: Array<{ id: string, name: string }>) => void;
              fetchProjects: (userId: string) => Promise<void>;
            }
            ```
        *   **스토어 구현 추가:**
            *   `currentProjectId`: 초기값 `null`.
            *   `projects`: 초기값 `[]`.
            *   `isLoadingProjects`: 초기값 `false`.
            *   `setCurrentProjectId`: `(projectId) => set({ currentProjectId: projectId })` 구현.
            *   `setProjects`: `(projects) => set({ projects })` 구현.
            *   `fetchProjects`:
                *   `set({ isLoadingProjects: true })` 호출.
                *   `fetch('/api/projects?userId=' + userId)` 호출 (try-catch 블록 사용).
                *   성공 시: `response.json()` 파싱 후 `set({ projects: data, isLoadingProjects: false })` 호출.
                *   실패 시: `console.error` 및 `toast.error` 호출, `set({ isLoadingProjects: false })` 호출.
*   **테스트 작성 (2단계):**
    *   **목표:** `useAppStore`에 추가된 프로젝트 상태 및 액션 단위 테스트.
    *   **작업:**
        1.  **생성:** `src/store/useAppStore.test.ts` 파일 (없다면 생성).
        2.  **작성:** Zustand 테스팅 가이드라인에 따라 다음 케이스 테스트:
            *   `setCurrentProjectId` 호출 시 `currentProjectId` 상태가 올바르게 변경되는지 검증.
            *   `setProjects` 호출 시 `projects` 상태가 올바르게 변경되는지 검증.
            *   `fetchProjects` 호출 시:
                *   `isLoadingProjects` 상태가 `true` -> `false`로 변경되는지 검증.
                *   API 호출(`fetch`)이 올바른 URL로 이루어지는지 검증 (MSW 또는 `vi.spyOn(global, 'fetch')` 사용).
                *   API 성공 시 `setProjects`가 올바른 데이터로 호출되는지 검증.
                *   API 실패 시 `toast.error`가 호출되는지 검증.
*   **검증:**
    *   `vitest run src/store/useAppStore.test.ts` 실행하여 모든 테스트 통과 확인.
    *   타입스크립트 오류 없음 확인.

---

**3단계: API 엔드포인트 구현 (프로젝트 CRUD)**

*   **목표:** 프로젝트 CRUD를 위한 API 라우트 핸들러 구현.
*   **작업:**
    1.  **생성/수정:** `src/app/api/projects/route.ts` - `GET`, `POST` 핸들러 구현.
        *   `GET`: `userId` 쿼리 파라미터 기반으로 `prisma.project.findMany` 사용, `ownerId` 필터링, `id`, `name` 선택. **인증 필수**.
        *   `POST`: 요청 본문(`name`, `ownerId`) 기반으로 `prisma.project.create` 사용. **인증 필수**. Zod 유효성 검사 추가.
    2.  **생성/수정:** `src/app/api/projects/[id]/route.ts` - `PUT`, `DELETE` 핸들러 구현.
        *   `PUT`: 경로 파라미터(`id`), 요청 본문(`name`) 기반으로 `prisma.project.update` 사용. **인증 및 소유권 확인 필수**. Zod 유효성 검사 추가.
        *   `DELETE`: 경로 파라미터(`id`) 기반으로 `prisma.project.delete` 사용. **인증 및 소유권 확인 필수**. (Cascade 삭제 확인)
    3.  **수정:** `src/app/api/cards/route.ts` (POST 핸들러)
        *   Zod 스키마에 `projectId: z.string()` 추가.
        *   `prisma.card.create` 호출 시 `data` 객체에 `projectId` 포함.
    4.  **수정:** `src/app/api/cards/[id]/route.ts` (PUT 핸들러)
        *   Zod 스키마에 `projectId: z.string().optional()` 추가.
        *   `prisma.card.update` 호출 시 `data` 객체에 `projectId` 포함 (존재할 경우).
    5.  **수정:** `src/app/api/cards/route.ts` (GET 핸들러)
        *   `projectId` 쿼리 파라미터 지원 추가.
        *   `prisma.card.findMany` 호출 시 `where` 조건에 `projectId` 필터링 로직 추가 (`projectId` 파라미터가 있을 경우).
*   **테스트 작성 (3단계):**
    *   **목표:** 프로젝트 API 엔드포인트 테스트 (MSW 사용).
    *   **작업:**
        1.  **수정:** `src/tests/msw/handlers.ts` 파일 - `/api/projects` 및 `/api/projects/[id]` 경로에 대한 `http` 핸들러 추가 (GET, POST, PUT, DELETE).
            *   성공 응답, 실패 응답(401, 403, 404, 500), 유효성 검사 실패 응답 모킹.
            *   쿼리 파라미터 및 경로 파라미터를 확인하는 로직 포함.
        2.  **생성:** `src/app/api/projects/route.test.ts` 및 `src/app/api/projects/[id]/route.test.ts` 파일.
        3.  **작성:** 각 API 핸들러 함수에 대한 테스트 케이스 작성 (`fetch` API 직접 사용 또는 Next.js API 테스트 유틸리티 사용):
            *   성공적인 프로젝트 목록 조회 (GET).
            *   특정 사용자의 프로젝트만 조회되는지 검증 (GET).
            *   성공적인 프로젝트 생성 (POST) 및 반환 데이터 검증.
            *   프로젝트 생성 시 유효성 검사 실패 케이스 (POST).
            *   성공적인 프로젝트 이름 수정 (PUT) 및 반환 데이터 검증.
            *   타인 프로젝트 수정 시도 시 403 오류 검증 (PUT).
            *   존재하지 않는 프로젝트 수정 시도 시 404 오류 검증 (PUT).
            *   성공적인 프로젝트 삭제 (DELETE).
            *   타인 프로젝트 삭제 시도 시 403 오류 검증 (DELETE).
            *   존재하지 않는 프로젝트 삭제 시도 시 404 오류 검증 (DELETE).
            *   인증되지 않은 접근 시 401 오류 검증 (모든 메서드).
        4.  **수정:** 기존 카드 API 테스트 파일 (`src/app/api/cards/...`) - `projectId` 관련 로직 검증 추가.
*   **검증:**
    *   `vitest run src/app/api` 실행하여 모든 API 관련 테스트 통과 확인.

---

**4단계: UI 구현 - 프로젝트 툴바 및 정보 수정**

*   **목표:** `ProjectToolbar`에 현재 프로젝트 이름 표시 및 수정 기능 추가.
*   **작업:**
    1.  **수정:** `src/components/layout/ProjectToolbar.tsx` 파일.
        *   `import { useAppStore } from '@/store/useAppStore';` 추가.
        *   `const { currentProjectId, projects, fetchProjects } = useAppStore();` 호출.
        *   `import { useAuth } from '@/contexts/AuthContext';` 추가.
        *   `const { user } = useAuth();` 호출.
        *   `useEffect` 훅 추가: `user?.id`가 변경될 때 `fetchProjects(user.id)` 호출.
        *   현재 표시되는 "프로젝트 이름" 텍스트 부분을 동적으로 변경: `const currentProject = projects.find(p => p.id === currentProjectId);` 로 찾아서 `currentProject?.name || '프로젝트 선택'` 표시.
        *   드롭다운 메뉴 내 "프로젝트 설정" (또는 "이름 변경") `DropdownMenuItem` 추가.
    2.  **생성:** `src/components/project/ProjectSettingsModal.tsx` (모달 방식 선택 시).
        *   `Dialog`, `Input`, `Button`, `Label` 등 UI 컴포넌트 사용.
        *   `useState`로 모달 열림 상태 및 입력된 프로젝트 이름 관리.
        *   "저장" 버튼 클릭 시 `PUT /api/projects/[id]` API 호출 로직 구현 (try-catch, toast 사용).
        *   성공 시 `fetchProjects(user.id)` 호출, 모달 닫기.
    3.  **연결:** `ProjectToolbar.tsx`에서 "프로젝트 설정" 메뉴 아이템 클릭 시 모달 열도록 구현.
*   **테스트 작성 (4단계):**
    *   **목표:** `ProjectToolbar` 및 `ProjectSettingsModal` 컴포넌트 테스트.
    *   **작업:**
        1.  **생성/수정:** `src/components/layout/ProjectToolbar.test.tsx` 파일.
            *   `useAppStore` 모킹 설정: `currentProjectId`, `projects`, `fetchProjects` 반환하도록 설정.
            *   `useAuth` 모킹 설정: `user` 객체 반환하도록 설정.
            *   컴포넌트 렌더링 후 `useEffect`의 `fetchProjects` 호출 검증.
            *   `currentProjectId`에 따라 올바른 프로젝트 이름이 표시되는지 검증 (`screen.getByText`).
            *   "프로젝트 설정" 메뉴 클릭 시 모달(모킹된)이 열리는지 검증.
        2.  **생성:** (모달 방식 선택 시) `src/components/project/ProjectSettingsModal.test.tsx`.
            *   모달이 열렸을 때 입력 필드와 버튼이 있는지 검증.
            *   이름 입력 후 "저장" 클릭 시 `fetch`가 올바른 `PUT` 요청으로 호출되는지 검증 (MSW 핸들러 필요).
            *   API 호출 성공 시 `fetchProjects` 호출 및 `onClose` (모킹된) 호출 검증.
            *   API 호출 실패 시 `toast.error` 호출 검증.
*   **검증:**
    *   `vitest run src/components/layout/ProjectToolbar.test.tsx` 및 관련 컴포넌트 테스트 실행하여 통과 확인.
    *   실제 앱 실행하여 UI 동작 확인.

---

**5단계: UI 구현 - 프로젝트 선택 및 관리 화면**

*   **목표:** 프로젝트 선택/생성/삭제 UI 구현.
*   **작업:** (UI 위치 결정 후 해당 컴포넌트 수정/생성)
    1.  **생성/수정:** 프로젝트 목록 표시 컴포넌트 (예: `src/components/project/ProjectList.tsx`).
        *   `useAppStore`에서 프로젝트 관련 상태/액션 가져오기.
        *   `projects` 배열을 매핑하여 목록 렌더링. `isLoadingProjects` 상태 표시.
        *   각 프로젝트 항목 클릭 시 `setCurrentProjectId` 호출. `currentProjectId`와 일치하는 항목 강조 표시.
    2.  **생성/수정:** 새 프로젝트 생성 버튼 및 관련 모달/폼 구현.
        *   버튼 클릭 시 모달 열기.
        *   모달 내에서 이름 입력받고 "생성" 버튼 클릭 시 `POST /api/projects` 호출.
        *   성공 시 `fetchProjects` 호출 및 모달 닫기. `toast.success` 표시. 실패 시 `toast.error`.
    3.  **생성/수정:** 프로젝트 삭제 버튼 및 확인 다이얼로그 구현.
        *   각 프로젝트 항목 옆에 삭제 버튼 추가.
        *   클릭 시 `AlertDialog` 표시.
        *   "삭제 확인" 버튼 클릭 시 `DELETE /api/projects/[id]` 호출.
        *   성공 시 `fetchProjects` 호출. `toast.success` 표시. 삭제된 ID가 `currentProjectId`와 같으면 `setCurrentProjectId(null)` 호출. 실패 시 `toast.error`.
*   **테스트 작성 (5단계):**
    *   **목표:** 프로젝트 목록, 생성, 삭제 관련 컴포넌트 테스트.
    *   **작업:**
        1.  **생성/수정:** 프로젝트 목록 컴포넌트 테스트 파일 (예: `src/components/project/ProjectList.test.tsx`).
            *   `useAppStore` 모킹 (프로젝트 목록, 로딩 상태 등).
            *   목록이 올바르게 렌더링되는지 검증.
            *   로딩 상태가 표시되는지 검증.
            *   프로젝트 항목 클릭 시 `setCurrentProjectId`가 호출되는지 검증.
            *   삭제 버튼 클릭 시 `AlertDialog` (모킹된)가 열리는지 검증.
        2.  **생성/수정:** 새 프로젝트 생성 모달/폼 테스트 파일.
            *   "생성" 버튼 클릭 시 `fetch`가 올바른 `POST` 요청으로 호출되는지 검증 (MSW 핸들러 필요).
            *   API 성공 시 `fetchProjects` 및 `onClose` 호출 검증. 실패 시 `toast.error` 검증.
        3.  **생성/수정:** 삭제 확인 다이얼로그 테스트 (통합 또는 별도).
            *   "삭제 확인" 버튼 클릭 시 `fetch`가 올바른 `DELETE` 요청으로 호출되는지 검증 (MSW 핸들러 필요).
            *   API 성공 시 `fetchProjects` 및 `setCurrentProjectId(null)` (해당하는 경우) 호출 검증. 실패 시 `toast.error` 검증.
*   **검증:**
    *   관련 컴포넌트 테스트 실행하여 통과 확인.
    *   실제 앱 실행하여 UI 동작 확인.

---

**6단계: 카드와 프로젝트 연결**

*   **목표:** 카드 생성/조회 시 현재 프로젝트 ID 반영.
*   **작업:**
    1.  **수정:** `src/components/cards/CreateCardButton.tsx` (또는 관련 모달).
        *   `import { useAppStore } from '@/store/useAppStore';` 추가.
        *   `const { currentProjectId } = useAppStore();` 호출.
        *   `handleSubmit` 함수 내 `fetch('/api/cards', ...)` 호출 시 `body` 객체에 `projectId: currentProjectId` 추가.
        *   `currentProjectId`가 `null`일 경우의 예외 처리 추가 (예: `toast.error('프로젝트를 먼저 선택해주세요.'); return;`).
    2.  **수정:** 카드 목록 로딩 로직 (예: `src/components/board/hooks/useBoardData.ts`의 `fetchBoardData` 또는 `src/components/cards/CardList.tsx`의 `fetchCards`).
        *   `import { useAppStore } from '@/store/useAppStore';` 추가.
        *   `const { currentProjectId } = useAppStore();` 호출.
        *   `useEffect`의 의존성 배열에 `currentProjectId` 추가.
        *   `fetch('/api/cards', ...)` 호출 URL 생성 시 `currentProjectId`가 존재하면 `?projectId=${currentProjectId}` 쿼리 스트링 추가.
        *   `currentProjectId`가 `null`일 때의 동작 정의 (모든 카드 로드 or 빈 목록).
*   **테스트 작성 (6단계):**
    *   **목표:** 카드 생성 및 목록 조회 시 `projectId` 반영 검증.
    *   **작업:**
        1.  **수정:** `src/components/cards/CreateCardButton.test.tsx`.
            *   `useAppStore` 모킹에 `currentProjectId` 추가.
            *   카드 생성 시 `fetch`가 `projectId`를 포함하여 호출되는지 검증 (`expect(fetch).toHaveBeenCalledWith('/api/cards', expect.objectContaining({ body: expect.stringContaining('"projectId":"test-project-id"') }))`).
            *   `currentProjectId`가 `null`일 때 오류 토스트가 호출되는지 검증.
        2.  **수정:** 카드 목록 컴포넌트 테스트 파일 (예: `src/components/board/hooks/useBoardData.test.tsx`).
            *   `useAppStore` 모킹에 `currentProjectId` 추가 및 변경 시뮬레이션.
            *   `currentProjectId` 변경 시 `fetch`가 올바른 `projectId` 쿼리 파라미터와 함께 호출되는지 검증 (`expect(fetch).toHaveBeenCalledWith(expect.stringContaining('?projectId=test-project-id'))`).
*   **검증:**
    *   관련 컴포넌트 테스트 실행하여 통과 확인.
    *   실제 앱 실행하여 프로젝트 전환 시 카드 목록이 올바르게 필터링되는지, 새 카드 생성 시 현재 프로젝트에 연결되는지 확인.

---

**7단계: 테스트 코드 작성 및 리팩토링**

*   **목표:** 전체 기능 테스트 커버리지 확보 및 코드 품질 개선.
*   **작업:**
    1.  **실행:** `vitest run --coverage` - 커버리지 리포트 확인.
    2.  **작성:** 커버리지가 부족한 부분에 대해 추가 단위/통합 테스트 작성.
    3.  **리팩토링:** 코드 중복 제거, 컴포넌트/훅 책임 분리, 타입 정의(`src/types`) 업데이트 및 일관성 검토.
    4.  **검토:** 모든 테스트 통과 및 코드 품질 기준 만족 확인.
*   **검증:**
    *   `vitest run` 실행하여 모든 테스트 통과 확인.
    *   커버리지 목표 달성 확인.

---

**8단계: "휴지통" 기능 구현 (선택 사항 - 심화)**

*   **목표:** 프로젝트 Soft Delete 및 복원/영구 삭제 기능 구현.
*   **작업:** (이전 답변의 8단계 작업 상세 내용 참조)
    1.  **수정:** Prisma 스키마 (`deletedAt` 또는 `status` 필드 추가).
    2.  **실행:** Prisma 마이그레이션.
    3.  **수정:** API 핸들러 (`DELETE`, `GET /api/projects`).
    4.  **생성:** 신규 API 핸들러 (`GET /api/projects/trash`, `PUT /api/projects/[id]/restore`, `DELETE /api/projects/[id]/permanent`).
    5.  **생성/수정:** 휴지통 UI 컴포넌트 및 관련 로직.
*   **테스트 작성 (8단계):**
    *   **목표:** 휴지통 관련 API 및 UI 테스트.
    *   **작업:**
        1.  **수정/생성:** MSW 핸들러 및 API 테스트 파일 업데이트/생성.
        2.  **생성/수정:** 휴지통 관련 UI 컴포넌트 테스트 파일 작성/수정.
*   **검증:**
    *   모든 관련 테스트 통과 확인.
    *   실제 앱 실행하여 휴지통 기능 동작 확인.

---

이 상세한 Tasklist를 통해 Cursor Agent가 각 단계를 명확히 이해하고 체계적으로 프로젝트 기능을 구현하며 테스트를 병행할 수 있기를 바랍니다.