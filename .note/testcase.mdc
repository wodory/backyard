---
description: 
globs: 
alwaysApply: false
---
**목표:** 사용자가 지정한 폴더 내의 모든 컴포넌트/훅 파일(`.ts`, `.tsx` 중 테스트 파일 제외)에 대해 Vitest 테스트 커버리지를 확보하고 기존 테스트를 개선합니다. `[package]` 및 `[zustand-action-msw]` 룰을 준수해야 합니다.

**핵심 테스트 작성 지침:**

*   **[A. 테스트 기본 원칙]**
    *   테스트는 `vitest`와 `@testing-library/react`를 사용하여 작성합니다.
    *   각 테스트 파일은 테스트 대상 파일의 **의도된 동작**을 검증해야 합니다.
    *   테스트는 가급적 애플리케이션 코드의 **현재 인터페이스나 구현**을 기반으로 작성합니다.
    *   테스트 가능성 확보를 위한 **최소한의 필수적인 앱 코드 리팩토링**은 허용되나, 이 경우 **반드시 `do rev`**를 통해 변경 내용과 이유를 보고해야 합니다. (`[package]` 룰 참조)

*   **[B. 모킹 전략]**
    *   **Zustand:** `vi.mock`을 사용하여 `useAppStore`를 모킹합니다. 테스트 시나리오에 필요한 초기 상태를 제공하고, 검증할 액션 함수는 `vi.fn()`으로 스파이(spy) 처리합니다.
    *   **API 호출:** `fetch` 또는 관련 API 클라이언트 함수를 모킹합니다. `[zustand-action-msw]` 룰에 따라 MSW 핸들러 (`src/tests/msw/handlers.ts`)를 사용하여 API 응답(성공/실패)을 제어합니다. 필요한 경우 테스트 케이스별로 `server.use()`를 사용하여 특정 응답을 설정합니다.
    *   **기타 의존성:** `next/navigation`, 외부 라이브러리 등 필요한 다른 의존성도 `vi.mock`으로 적절히 모킹합니다.

*   **[C. 테스트 케이스 구성]**
    *   주요 시나리오를 포함해야 합니다:
        *   기본 렌더링 검증 (초기 상태에서의 UI 요소 확인).
        *   사용자 인터랙션 시뮬레이션 (`@testing-library/user-event` 사용 권장).
        *   인터랙션 후 예상되는 Zustand 액션이 **올바른 인자**로 호출되었는지 검증 (`expect(...).toHaveBeenCalledWith(...)`).
        *   Zustand 상태 변경에 따라 UI가 **올바르게 업데이트**되는지 검증 (`expect(screen.getBy...)`).
        *   (해당하는 경우) 로딩 상태, 오류 상태 등 비동기 처리 관련 UI 변화 검증.

*   **[D. 테스트 환경]**
    *   테스트 실행 커맨드는 `yarn vitest run`을 사용합니다.
    *   테스트 파일 위치 및 명명 규칙은 `[package]` 룰을 따릅니다.

**세부 실행 계획:**

1.  **파일 목록 스캔:** 사용자가 지정한 폴더 내의 `*.ts` 및 `*.tsx` 파일 목록을 가져옵니다 (테스트/문서 파일 제외).
2.  **개별 파일 처리 루프:** 스캔된 각 파일(`targetFile`)에 대해 다음 단계를 반복합니다.

    *   **a. 테스트 파일 존재 여부 확인:** `targetFile`에 대응하는 `testFile`(`.test.ts` 또는 `.test.tsx`) 존재 여부를 확인합니다.

    *   **b. 테스트 파일 신규 생성 (존재하지 않을 경우):**
        *   `testFile`이 없으면, `targetFile`에 대한 새로운 테스트 파일(`testFile`)을 생성하고 기본 구조를 설정합니다.
        *   **"핵심 테스트 작성 지침" [A, B, C, D]** 를 참조하여, `targetFile`의 주요 기능을 검증하는 테스트 케이스들을 작성합니다.

    *   **c. 기존 테스트 파일 수정/보강 (존재할 경우):**
        *   `testFile`이 있다면, 해당 테스트 파일을 열고 분석합니다.
        *   (선택적/Agent 능력 따라) `yarn vitest run --related ${testFile}` 명령을 실행하여 현재 테스트 상태(깨짐 여부)를 확인합니다.
        *   **[깨진 테스트 수정]** 깨진 테스트가 있다면, 오류 메시지와 `targetFile`의 현재 코드를 비교하여 **"핵심 테스트 작성 지침" [A, B, C, D]** 에 따라 테스트 로직을 수정합니다.
        *   **[테스트 보강]** `targetFile`의 코드와 기존 테스트 케이스를 비교하여, 누락된 주요 기능/시나리오에 대한 테스트 케이스를 **"핵심 테스트 작성 지침" [A, B, C, D]** 에 따라 추가합니다. 특히 액션 호출 검증 및 상태 기반 렌더링 검증이 충분한지 확인하고 보강합니다.

    *   **d. 룰 준수 확인:** 생성/수정된 `testFile`이 `[package]` 및 `[zustand-action-msw]` 룰을 준수하는지 최종 확인합니다.

3.  **최종 보고:** 사용자가 지정한 폴더 내 모든 대상 파일에 대한 테스트 작업 완료를 보고합니다.

**IMPLEMENTATION CHECKLIST:**
1.  사용자가 지정한 폴더에서 테스트 대상 파일 목록(`*.ts`, `*.tsx`, 테스트/문서 파일 제외)을 식별합니다.
2.  첫 번째 대상 파일(`targetFile1`)에 대한 테스트 파일 존재 여부를 확인합니다.
3.  (조건부) `testFile1`이 없으면, 파일을 생성하고 **"핵심 테스트 작성 지침"** 에 따라 테스트 내용을 작성합니다.
4.  (조건부) `testFile1`이 있으면, 파일을 열고 깨진 테스트 수정 및 부족한 테스트 케이스를 **"핵심 테스트 작성 지침"** 에 따라 보강합니다.
5.  `testFile1`이 관련 룰을 준수하는지 확인합니다.
6.  두 번째 대상 파일(`targetFile2`)에 대해 2-5 단계를 반복합니다.
7.  ... (폴더 내 모든 대상 파일에 대해 반복) ...
8.  모든 대상 파일 처리가 완료되었음을 보고합니다.

---

[MODE: EXECUTE]
위 계획과 **"핵심 테스트 작성 지침"** 에 따라 사용자가 지정한 폴더 내 파일들에 대한 테스트 작업을 시작합니다.