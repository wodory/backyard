
GET http://localhost:3000/api/projects
{{
  if (response && response.parsedBody && response.parsedBody.length > 0) {
    $global.projectId = response.parsedBody[0].id;
    $global.projectName = response.parsedBody[0].name;
    console.log(`프로젝트 ID: ${$global.projectId}, 이름: ${$global.projectName}`);
  } else {
    console.error("프로젝트가 없습니다. 먼저 프로젝트를 생성해주세요.");
  }
}}

###
GET http://localhost:3000/api/cards?projectId={{$global.projectId}}
{{
  if (response && response.parsedBody && response.parsedBody.length > 0) {
    $global.cardId = response.parsedBody[0].id;
    $global.cardTitle = response.parsedBody[0].title;
    console.log(`카드 ID: ${$global.cardId}, 제목: ${$global.cardTitle}`);
  } else {
    console.error("카드가 없습니다. 먼저 카드를 생성해주세요.");
  }
}}

###
# 1. CardNode 목록 조회
##no-auth
GET http://localhost:3000/api/cardnodes?projectId={{$global.projectId}}
{{
  console.log("CardNode 목록 조회 결과:");
  console.log(response.parsedBody);
  if (response && response.parsedBody && response.parsedBody.length > 0) {
    $global.existingCardNodeId = response.parsedBody[0].id;
    console.log(`기존 CardNode ID: ${$global.existingCardNodeId}`);
  }
}}

###
# 2. 새 CardNode 생성
POST http://localhost:3000/api/cardnodes
Authorization: Bearer {{$variable supаToken}} // 변수 사용
Content-Type: application/json

{
  "cardId": "{{$global.cardId}}",
  "projectId": "{{$global.projectId}}",
  "positionX": 100,
  "positionY": 200,
  "styleJson": {
    "width": 250,
    "backgroundColor": "#f5f5f5"
  },
  "dataJson": {
    "isExpanded": false,
    "customLabel": "테스트 노드"
  }
}

{{
  if (response.status === 201) {
    console.log("새 CardNode 생성 성공!");
    $global.newCardNodeId = response.parsedBody.id;
    console.log(`새 CardNode ID: ${$global.newCardNodeId}`);
  } else {
    console.error("CardNode 생성 실패:", response.parsedBody);
  }
}}

###
# 3. CardNode 수정
PATCH http://localhost:3000/api/cardnodes/{{$global.newCardNodeId}}
Content-Type: application/json

{
  "positionX": 150,
  "positionY": 250,
  "styleJson": {
    "width": 300,
    "backgroundColor": "#e0f7fa"
  }
}

{{
  if (response.status === 200) {
    console.log("CardNode 수정 성공!");
    console.log("수정된 CardNode:", response.parsedBody);
  } else {
    console.error("CardNode 수정 실패:", response.parsedBody);
  }
}}

###
# 4. CardNode 삭제
DELETE http://localhost:3000/api/cardnodes/{{$global.newCardNodeId}}

{{
  if (response.status === 204) {
    console.log("CardNode 삭제 성공!");
  } else {
    console.error("CardNode 삭제 실패:", response.parsedBody);
  }
}}

###
# 5. 삭제 후 CardNode 목록 확인
GET http://localhost:3000/api/cardnodes?projectId={{$global.projectId}}

{{
  console.log("삭제 후 CardNode 목록:");
  console.log(response.parsedBody);
  test("삭제된 CardNode가 목록에 없는지 확인", () => {
    if (response.parsedBody && Array.isArray(response.parsedBody)) {
      const deletedNodeExists = response.parsedBody.some(node => node.id === $global.newCardNodeId);
      if (deletedNodeExists) {
        throw new Error(`삭제된 CardNode(${$global.newCardNodeId})가 여전히 목록에 존재합니다.`);
      } else {
        console.log("✅ 삭제 확인 완료: 삭제된 CardNode가 목록에 없습니다.");
      }
    }
  });
}}