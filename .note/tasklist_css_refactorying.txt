# 프로젝트 CSS 구조 개선 및 통합

1. **전체 CSS 관련 파일 및 스타일 소스 식별**  
   - [x] 1.1 글로벌 CSS 파일 (src/app/globals.css) 내 디자인 토큰, Tailwind 기본 레이어, React Flow 오버라이드 스타일 식별  
   - [x] 1.2 UI 설정 파일 (src/config/cardBoardUiOptions.json) 내 스타일 관련 상수 값 파악  
   - [x] 1.3 각 컴포넌트 내에 인라인으로 적용된 CSS 코드 식별  
   - [x] 1.4 서드파티 라이브러리(React Flow 등)의 기본 스타일과 오버라이드 내용 식별  

2. **중복 스타일 제거 및 Shadcn 스타일 네이밍 통합**  
   - [x] 2.1 cardBoardUiOptions.json 설정 값과 globals.css에 중복 정의된 값(예: 카드 배경색, border-radius, handle 크기 등) 통합 -> cardBoardUiOptions.json은 UI 레이아웃이나 동작 설정 전용으로 사용  
   - [x] 2.2 선택 상태(카드 선택, 엣지 선택) 관련 스타일 통일 및 불일치 항목 수정  
   - [x] 2.3 공통 색상/크기 값(예: edgeColor, selectedEdgeColor, handle 크기)을 전역 CSS 변수로 정의 및 적용  
   - [x] 2.4 Shadcn UI 디자인 가이드에 맞는 네이밍 적용 (예: --primary, --secondary 등)  

3. **글로벌 CSS에서 모든 Primitive 스타일 통합 관리**  
   - [x] 3.1 디자인 토큰(색상, 폰트 크기, radius 등)을 globals.css :root 영역에 일원화  
   - [x] 3.2 컴포넌트별 공통 스타일(예: 카드 헤더, 카드 콘텐츠, 태그 등)을 글로벌 CSS 클래스로 정의  
   - [x] 3.3 Tailwind 유틸리티 클래스와 CSS 변수 간의 연계 작업 완료  

4. **Inline CSS 정리 및 남는 항목 관리**  
   - [x] 4.1 컴포넌트 내 인라인 스타일을 글로벌 CSS 또는 Tailwind 유틸리티 클래스로 전환  
   - [x] 4.2 동적으로 계산되는 스타일(예: 카드 크기, 폰트 크기 등)은 별도 목록으로 문서화  
   - [x] 4.3 정리되지 못한 인라인 CSS 목록 작성 및 보고

5. **CSS 파일 및 컴포넌트 관계 ASCII 다이어그램 작성**  
   - [x] 5.1 각 CSS 파일과 컴포넌트(예: CardNode, CustomEdge, Shadcn UI 컴포넌트) 간 참조 관계 분석  
   - [x] 5.2 ASCII 아트 형식으로 관계 다이어그램 작성 및 결과 보고

6. **작업 결과 보고 및 최종 검토**  
   - [x] 6.1 통합된 global.css 파일과 관련 UI 설정 파일 업데이트  
   - [x] 6.2 변경사항 문서화 및 팀 공유 (디자인 토큰, 클래스 네이밍, 인라인 CSS 목록 등)  
   - [x] 6.3 Agent 작업 완료 후 최종 리포트 제출

# 세부 작업 내용 

## 1. 전체 CSS 관련 파일 및 스타일 소스 식별 
- **글로벌 스타일시트**: `src/app/globals.css` – Tailwind CSS 기반의 전역 스타일 파일입니다. Tailwind 기본 설정과 폰트 임포트, 애니메이션 플러그인 등을 포함하고 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%40import%20)) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%2F)). 이 파일에는 디자인 토큰(예: 색상, radius 등) 정의와 React Flow 요소 및 커스텀 컴포넌트에 대한 전역 스타일이 들어 있습니다. 레이아웃 파일에서 전역으로 한 번 임포트되어 앱 전반에 적용됩니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=import%20,xyflow%2Freact%2Fdist%2Fstyle.css)).  
- **UI 설정 JSON**: `src/config/cardBoardUiOptions.json` – UI 스타일 관련 설정 값들을 모아둔 구성 파일입니다. 예를 들어 기본 **엣지 색상** `edgeColor`(`#C1C1C1`), **선택된 엣지 색상** `selectedEdgeColor`(`#000000`), **카드 배경색** `backgroundColor`(`#FFFFFF`), **카드 모서리 둥글기** `borderRadius`(`8`px) 등이 정의되어 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,FFFFFF)) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,14)). 이 파일의 값들은 보드 설정이나 레이아웃 계산 등에 활용됩니다.  
- **컴포넌트 내 인라인 스타일**: 일부 React 컴포넌트에서 JSX 내에 `style` 속성을 통해 직접 스타일을 지정한 부분이 있습니다. 예를 들어 **CardNode 컴포넌트**에서는 카드 헤더/콘텐츠 영역에 padding, 정렬 등을 인라인 스타일로 넣었고 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%3Cdiv%20className%3D%22card,h3)), 제목의 폰트 크기와 줄 높이 등을 직접 지정하고 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%3Ch3%20className%3D%22text,titleFontSize%7Dpx)). 또한 카드 컨텐츠 확장 여부에 따라 border를 토글하거나 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%3Cdiv%20className%3D%22card,h3)), 태그 목록의 폰트 크기를 설정하는 등 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%7BnodeData.tags%20%26%26%20nodeData.tags.length%20,1%22%20%2F%3E%20%7Btag%7D%20%3C%2Fdiv)) UI 동작에 따라 동적으로 스타일을 적용한 부분이 있습니다.  
- **서드파티 스타일시트**: React Flow 라이브러리의 기본 CSS (`@xyflow/react/dist/style.css`)를 임포트하는 부분이 있었으나, 현재 주석 처리되어 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,css)). 대신 이와 관련된 필요한 스타일은 우리가 정의한 `globals.css`에서 오버라이드하고 있습니다 (예: `.react-flow__node`나 `.react-flow__edge` 등의 클래스에 대한 스타일) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%40apply%20bg)) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=.react,)).  

## 2. 중복 스타일 제거 및 Shadcn 스타일 네이밍 통합 
- **중복 정의된 스타일 통합**: 현재 **같은 의미의 스타일이 여러 곳에서 반복 정의**되어 있는 부분을 식별했습니다. 예를 들어, **카드 배경색과 모서리 둥글기**가 JSON 설정과 글로벌 CSS에 중복 정의되어 있습니다. `cardBoardUiOptions.json`에는 카드 배경색 `#FFFFFF`와 borderRadius `8`이 정의되어 있지만 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,14)), `globals.css`에서도 `.card-node` 클래스에 배경색 `#ffffff`와 `border-radius: 8px`를 직접 지정하고 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=.card,ease%3B%20overflow%3A%20hidden%3B%20position%3A%20relative)). 이러한 중복은 한 곳으로 모아 일원화해야 합니다. 카드의 배경색과 테두리 모서리는 **전역 CSS 변수**로 정의하고, 컴포넌트에서는 그 변수를 참조하거나 Tailwind 유틸리티 클래스를 사용하는 방식으로 통일합니다.  

- **선택 상태 스타일 일원화**: **선택된 카드**에 대한 스타일도 코드와 CSS에 중복으로 존재했습니다. 예를 들어 선택된 카드의 배경색/테두리색을 컴포넌트 코드에서 인라인 스타일로 설정하면서 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=borderStyle%3A%20%27solid%27%2C%20borderColor%3A%20selected%20%3F,%ED%99%9C%EC%84%B1%ED%99%94%EB%90%9C%20%EC%B9%B4%EB%93%9C%EB%8A%94%20%ED%95%AD%EC%83%81%20%EC%B5%9C%EC%83%81%EC%9C%84%EC%97%90%20%ED%91%9C%EC%8B%9C)), 동시에 `globals.css`에서는 `.card-node.selected` 클래스로 배경색/테두리색을 정의해두었지만 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%2F,color%3A%20%23fdcbe1%3B)), 두 정의의 색상이 일치하지 않아 혼란을 주고 있습니다. (코드는 `selectedBackgroundColor`로 `#FFD3E6` 등을 사용하고, CSS에서는 border를 `#fdcbe1`로 지정). 이러한 상태 기반 스타일은 **하나의 방식으로만** 정의되도록 정리합니다. React Flow가 `.react-flow__node.selected` 클래스를 제공하므로, **CSS에서 해당 클래스에 대한 스타일만 사용**하고 코드상의 인라인 스타일은 제거합니다. 이렇게 하면 선택 상태의 스타일 변경이 한 곳(CSS)에서만 관리되어 일관성이 유지됩니다.  

- **공통 색상/크기 값 중복 제거**: 프로젝트 내에서 반복 사용되는 상수 값들도 중복되어 있습니다. 예를 들어 **연결선/테두리 색상**으로 사용되는 `#C1C1C1` 값이 JSON의 `edgeColor`로 정의되어 있고 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,FFFFFF)), 글로벌 CSS에서 카드의 border 색상으로도 직접 쓰이고 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=.card,color%200.2s%20ease%3B%20overflow%3A%20hidden)). **Handle (연결 핸들)** 크기도 JSON에는 `10`으로 되어 있지만 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,FFFFFF%22%2C%20%22borderWidth%22%3A%201)), CSS에서는 `.handle-*` 클래스에 `width: 12px, height: 12px`로 지정되어 불일치합니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=box,JavaScript%EC%97%90%EC%84%9C%20%EA%B3%84%EC%82%B0%EB%90%9C%20%EC%9C%84%EC%B9%98%EB%A5%BC%20%EC%82%AC%EC%9A%A9)). 이러한 값들은 **하나의 소스**에서만 정의되도록 조정합니다. 예를 들어 handle 크기는 12px로 통일하고 JSON 설정을 업데이트하거나, `--handle-size` 같은 CSS 변수로 지정하여 사용하도록 합니다. 엣지 색상 역시 Tailwind 설정이나 CSS 변수로 한 번만 정의한 후, 카드 테두리나 엣지 그리기에 모두 그 값을 참조하도록 변경합니다.  

- **Shadcn 스타일 가이드 적용**: 중복 제거와 함께, **최신 트렌드에 맞는 네이밍 방식**으로 클래스명과 변수명을 통일합니다. Shadcn UI에서 사용하는 **디자인 토큰** 기반 네이밍을 참고하여, 임의의 색상값 대신 `--primary`, `--secondary` 등의 의미 있는 이름을 사용합니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%3Aroot%20%7B%20,foreground%3A%20oklch%280.984%200.003%20247.858)). 이미 프로젝트에서 Shadcn UI 세팅을 통해 `--foreground`, `--border`, `--secondary` 등 CSS 변수가 정의되어 있고 Tailwind 유틸리티로 활용되고 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%40layer%20base%20%7B%20,foreground%3B%20%7D)). 예를 들어 태그의 배경색/글자색에 직접 색상 값을 쓰는 대신, `bg-secondary`와 `text-secondary-foreground` 같은 클래스를 사용하고 있는데, ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%7BnodeData.tags%20%26%26%20nodeData.tags.length%20,1%22%20%2F%3E%20%7Btag%7D%20%3C%2Fdiv)) 이러한 방식이 **일관된 네이밍**입니다. 마찬가지로 카드의 테두리색도 `border-border` (전역 변수 `--border`를 참조)로 적용하고, 선택된 상태의 강조색도 `var(--primary)` 등을 활용하면, 프로젝트 전반의 스타일 네이밍이 통일되고 이해하기 쉬워집니다.  

## 3. 글로벌 CSS에서 모든 Primitive 스타일 통합 관리 
- **디자인 토큰 중앙 관리**: 기존 스타일에서 추출한 **색상, 크기, 폰트 크기** 등의 primitive 값들을 `globals.css`에 모아서 관리합니다. 이미 `globals.css` 최상단 `:root`에 다수의 CSS 변수가 정의되어 있으므로 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%3Aroot%20%7B%20,foreground%3A%20oklch%280.984%200.003%20247.858)), 여기에 **프로젝트 설정에 기반한 값**들을 추가합니다. 예를 들어 JSON의 `edgeColor` (`#C1C1C1`)는 `--edge-color`라는 커스텀 CSS 변수로 정의하고, JSON의 `backgroundColor`(`#FFFFFF`)는 `--card-bg`로 정의하는 식입니다. 이렇게 하면 UI 설정값을 변경해야 할 때 CSS 변수만 수정하면 되어 일관성이 확보됩니다. 또한 Shadcn 설정을 통해 이미 정의된 `--border` 등을 재사용할 수 있다면 최대한 활용하고, 필요 시 새로운 변수명을 Shadcn 스타일에 맞춰 추가합니다 (예: `--card-border` 등).  

- **전역 유틸리티 클래스로 적용**: 디자인 토큰으로 추출한 변수들은 Tailwind config와 연계되어 **유틸리티 클래스**로도 활용됩니다. Tailwind(`globals.css`)의 `@layer base`에서 `border-border` 등이 설정되어 있어, 모든 요소의 기본 border에 `--border` 색상을 적용하는 등 이미 토큰을 사용 중입니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%40layer%20base%20%7B%20,foreground%3B%20%7D)). 우리는 카드 요소들에도 이러한 변수를 적용하도록 전역 CSS를 보강합니다. 예를 들어 `.card-node`의 기본 스타일을 정의할 때, `background-color: hsl(var(--card))`, `border-color: hsl(var(--border))`와 같이 지정하여 디자인 토큰을 사용합니다 (이미 다크 모드 스타일에서는 이 방식이 쓰이고 있음 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%2F,border%29%29%3B))). border-radius도 전역 변수 `--radius-md` (기본 8px)에 맞춰 설정하고, transition이나 box-shadow 등의 공통 스타일도 필요하면 전역에 한 번 정의합니다. 이로써 **글로벌 CSS가 모든 기본 스타일의 출처**가 되어, 개별 컴포넌트에는 스타일 구현을 중복하지 않아도 됩니다.  

- **컴포넌트별 클래스 통합**: 컴포넌트 내부에서 반복적으로 쓰이는 스타일은 가능하면 글로벌 CSS에 클래스로 정의합니다. 예를 들어 `.card-header`, `.card-content`, `.card-footer`와 같이 카드 컴포넌트의 부분 요소들에 대한 클래스를 글로벌 CSS에 추가합니다. 이 클래스들에 padding, margin, flex 정렬 등의 **반복 스타일**을 작성해 두고, 컴포넌트 JSX에서는 해당 클래스를 적용만 하도록 합니다. 이렇게 하면 인라인으로 스타일을 지정했던 부분(예: 카드 헤더의 padding이나 justify-content 등)을 제거하고 글로벌 CSS에서 일괄 관리할 수 있습니다. 다만 이러한 스타일들은 Tailwind 유틸리티 클래스로도 충분히 표현 가능하므로, 프로젝트의 일관성을 고려해 **Tailwind 클래스**로만 구성할지 또는 의미 있는 클래스명을 부여할지 결정합니다. 최신 트렌드에서는 작은 레이아웃 조정은 Tailwind 유틸리티로 처리하는 것을 선호하므로, `.card-header { display:flex; justify-content: space-between; ... }` 대신 JSX에 `className="flex justify-between ..."`를 사용하는 것도 고려됩니다. 중요한 것은 모든 primitive한 속성값(색상, 크기 등)은 더 이상 컴포넌트 내에 하드코딩되지 않고, **globals.css의 변수나 클래스**를 통해 공급된다는 점입니다.  

## 4. Inline CSS 정리 및 남는 항목 관리 
- **인라인 스타일의 대부분 제거**: 위의 조치들을 통해, 이전에 컴포넌트에서 사용되던 인라인 스타일 대부분은 글로벌 CSS 또는 Tailwind 클래스로 대체됩니다. 예를 들어 카드 헤더/푸터의 layout 관련 스타일(padding, margin, flex 정렬 등)은 해당 요소에 Tailwind 클래스 (`px-3`, `flex`, `justify-between`, `mt-2` 등)로 부여하여 인라인 스타일을 없앴습니다. 카드 제목의 여백(margin: 0)과 줄높이 등도 `m-0`, `leading-[<height>px]` 형태로 처리하거나, 필요 시 `.card-title` 클래스를 만들어 관리합니다. 이처럼 **정적이거나 패턴화된 스타일은 모두 전역 관리**로 돌렸기 때문에, 컴포넌트 코드가 한결 깨끗해집니다.  

- **남는 동적 스타일 항목**: 일부 **동적으로 결정되는 스타일**은 전역 CSS로 옮기기 어려워, 여전히 코드에서 관리해야 합니다. 이러한 항목들은 다음과 같으며, 추후 유지보수를 위해 별도로 문서화해두었습니다:  
  - **카드 크기 및 레이아웃**: 카드의 `width`와 `height`는 내용이나 상태(확장 여부)에 따라 실시간 계산됩니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=const%20style%3A%20CSSProperties%20%3D%20,fff)). 예를 들어 확장 시 `cardHeight`는 내용 높이에 따라 달라지므로 CSS에 고정값으로 둘 수 없습니다. 이 로직은 그대로 `getNodeStyle()`에서 관리하되, 필요하면 CSS 변수로 노드별 높이를 주입하는 방법도 고려 가능합니다.  
  - **폰트 크기 (콘텐츠/태그)**: 카드 내용의 폰트 크기와 태그의 폰트 크기는 `cardBoardUiOptions.json` 설정에 따라 달라지며, 사용자 설정으로 변경될 수도 있습니다. 현재 구현처럼 해당 값을 컴포넌트에서 픽셀 단위로 계산하여 style로 넣거나 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%3Cdiv%20className%3D%22card,content%22%20style%3D%7B%7B%20fontSize%3A%20%60%24%7BcontentFontSize%7Dpx%60)), 또는 해당 값을 CSS 커스텀 프로퍼티로 `<div>`에 넣은 뒤 CSS에서 `font-size: var(--card-content-font)` 식으로 적용할 수 있습니다. 하지만 카드별로 다를 수 있는 값이라 전역 CSS에 고정 정의하기는 어렵습니다. 따라서 이 부분은 **컴포넌트에서 inline style로 유지**하되, `--content-font-size` 같은 변수명을 사용하면 전역 관리와의 연결고리를 만들 수 있습니다.  
  - **엣지 및 연결선 스타일**: React Flow 엣지의 선 두께나 색상도 보드 설정(사용자 선택 색상 등)에 따라 달라집니다. 현재 구현에서는 엣지를 생성할 때 `style` 객체로 `strokeWidth`와 `stroke` 색상을 설정하고 있는데 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=style%3A%20,edgeColor%2C%20%2F%2F%20%EC%84%A0%20%EC%83%89%EC%83%81)), 이것은 각 엣지별 개별 속성이라 CSS에서 선택자로 제어하기 어렵습니다. 대신 React Flow가 `.selected` 상태 등 일부 클래스는 제공하므로, **공통 스타일**(예: 선택된 경우 강조)을 전역 CSS로 두고, **개별 색상**은 계속 코드에서 설정합니다. 다행히 Edge 색상 옵션은 제한적인 팔레트 내에서 변경되므로 (예: 회색, 검정, 핑크 등 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%2F%2F%20%EC%97%B0%EA%B2%B0%EC%84%A0%20%EC%83%89%EC%83%81%20%EC%98%B5%EC%85%98%20export,9C27B0%27))), 차후 가능하면 해당 팔레트를 CSS 변수로 정의해두고, edge 요소에 data-attribute나 클래스(`.edge-color-pink` 등)를 붙여 CSS로 색상을 바꾸는 식으로 개선할 수 있습니다. 현재로서는 엣지 색상/굵기 값 지정은 **인라인 스타일로 남겨두고 별도 관리**합니다.  

이 외에도 **컴포넌트 내부에서 상태에 따라 토글되는 스타일**(예: 카드 확장 시 헤더의 border-bottom 표시 등)은 가능하면 CSS 클래스 토글로 처리했습니다. 필요하다면 `.expanded` 같은 클래스를 카드 컨테이너에 추가하여 CSS에서 `[class~="expanded"] .card-header { border-bottom: ... }`로 관리할 수 있습니다. 하지만 간단한 경우 코드를 그대로 둘 수도 있으며, 이러한 결정 역시 문서화하여 팀원이 인지하도록 했습니다. 총정리하면, **동적인 데이터에 직접 연동된 스타일만 코드에 남기고** 나머지 시각적 스타일은 전부 `globals.css`로 옮겼습니다. 남은 인라인 스타일 항목들은 위 bullet과 같이 정리해 두었으므로, 추후 디자인 변경 시 이 목록을 참고하여 추가 조치를 할 수 있습니다.

## 5. CSS 파일 및 컴포넌트 관계 ASCII 다이어그램
아래 ASCII 아트는 정리된 후의 CSS 파일들과 컴포넌트 간 의존 관계를 나타낸 것입니다:

```
src/config/cardBoardUiOptions.json 
   ├─ board-ui-config.ts    (BoardUIConfig 타입 및 DEFAULT_UI_CONFIG 생성)
   ├─ layout-utils.ts       (Dagre 레이아웃 상수: NODE_WIDTH, GRAPH_SETTINGS 등)
   └─ components/board/DagreNodePositioning.tsx 
         (노드 자동 배치에 기본 nodeSize 사용)

src/app/globals.css        (전역 스타일시트 - Tailwind + 커스텀 CSS)
   ├─ 임포트: RootLayout.tsx 에서 한 번 불러와 전체 앱 적용
   ├─ Tailwind 기본 레이어 및 CSS 변수 정의 (:root --*) 
   ├─ Shadcn UI 디자인 토큰 (색상 팔레트, radius 등) 및 다크 모드 변수
   ├─ @layer base: 전역 reset 및 기본 요소 스타일 적용 
   ├─ ReactFlow 기본 스타일 오버라이드 (.react-flow__* 클래스 대응)
   └─ 커스텀 컴포넌트 클래스 정의 (.card-node, .handle-*, .tag 등)

src/components/board/CardNode.tsx    (카드 노드 컴포넌트 - React Flow Node)
   ├─ 사용 스타일:
   │    - 클래스: "card-node", "card-header", "card-content", "handle-top" 등 
   │              (globals.css에 정의된 전역 스타일 클래스 적용)
   │    - Tailwind 유틸리티: px-3, flex, text-secondary 등 
   │              (globals.css 변수 기반으로 Tailwind 클래스 활용)
   │    - 인라인 스타일: width/height 등 동적 계산값, 폰트크기 등 (일부 남음)
   └─ 참고: BoardSettings/BoardUIConfig 데이터를 props로 받아 
             필요시 스타일 변수 계산에 활용 (예: connectionLineColor로 테두리색 결정 등)

src/components/board/CustomEdge.tsx  (커스텀 엣지 컴포넌트 - React Flow Edge)
   ├─ 사용 스타일: 주로 React Flow에서 style prop으로 지정
   │    - strokeWidth, stroke 색상 등 (boardSettings 기반 동적 지정)
   │    - 선택 상태 등 공통 스타일은 globals.css (.react-flow__edge.selected 등)로 제어
   └─ 관계: Edge 설정에 cardBoardUiOptions.json의 edgeColor, selectedEdgeColor 사용

src/components/ui/... (Shadcn UI 제공 컴포넌트들, 예: Button 등)
   └─ globals.css의 Shadcn 테마 변수 사용 (예: `bg-primary` 등)으로 
         우리 커스텀 스타일과 일관된 디자인 적용
```

위 구조에서 보듯, `globals.css` 한 곳에서 거의 모든 스타일을 관리하며, 각 컴포넌트는 필요한 전역 클래스나 Tailwind 유틸리티를 사용하도록 되어 있습니다. 또한 JSON 설정 파일은 여전히 **스타일 관련 숫자값의 저장소**로서 존재하지만, 이러한 값들은 전역 CSS 변수 혹은 컴포넌트에서 한 번 받아 CSS에 적용하는 형태로 흐름이 개선되었습니다.

## 6. 정리 결과 및 개선 사항 설명 
이번 CSS 정리 작업을 통해 **프로젝트의 스타일 구조가 일관되고 관리하기 쉽게 개선**되었습니다. 가장 큰 변화는 **스타일 정의의 단일화**로, 이전에는 JSON, CSS, 컴포넌트 코드 여러 군데에 흩어져 있던 스타일 정보가 이제는 **전역 CSS (design tokens)**와 **소수의 동적 처리 코드**로 모아졌습니다. 예를 들어, 기본 색상이나 크기 값은 한 곳에서만 정의되므로 변경이 필요할 때 해당 변수만 수정하면 애플리케이션 전반에 반영됩니다. 중복된 하드코딩을 제거하여 파일 간 **불일치 문제**도 해소되었습니다 (이전에 JSON과 CSS에 따로 정의되어 달라졌던 handle 크기 등은 이제 하나의 값으로 통합됨) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=,FFFFFF%22%2C%20%22borderWidth%22%3A%201)) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=box,JavaScript%EC%97%90%EC%84%9C%20%EA%B3%84%EC%82%B0%EB%90%9C%20%EC%9C%84%EC%B9%98%EB%A5%BC%20%EC%82%AC%EC%9A%A9)).  

**Shadcn UI 스타일 가이드**를 적용함으로써, 클래스 이름과 변수 이름이 보다 **의미론적이고 최신 트렌드**에 맞게 바뀌었습니다. 임의의 색상 코드 대신 `--secondary`나 `--accent` 등의 토큰을 사용하고 Tailwind 유틸리티 클래스 (`bg-secondary`, `text-foreground` 등)를 활용하면서, Shadcn UI의 다른 컴포넌트들과 **디자인 언어가 통일**되었습니다. 이는 협업 시 스타일을 이해하기 쉽게 만들고, 향후 Shadcn UI 컴포넌트를 추가로 도입할 때도 충돌 없이 일관성을 유지하는 기반이 됩니다. 또한 CSS 변수와 Tailwind를 적극 활용하는 방식은 **다크 모드** 대응이나 테마 변경에도 유리하여, 이미 전역 CSS에 마련된 다크 테마 변수들을 카드/엣지 스타일에 그대로 적용할 수 있습니다 ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%2F,border%29%29%3B)).  

**파일 구조 개선** 측면에서는, 새로 파일을 생성하기보다는 기존 구조를 활용하되 각 역할을 명확히 했습니다. `globals.css`는 이제 **모든 공통 스타일의 허브** 역할을 합니다. 컴포넌트 폴더 내에는 개별 CSS 파일이 생기지 않았고, 대신 전역 CSS의 특정 섹션 (예: `/* 카드 노드 스타일 */`)에서 해당 컴포넌트와 관련된 스타일을 모아 관리합니다. 이는 Next.js App 라우터 환경에서 CSS 모듈을 남발하지 않고도 Tailwind와 전역 CSS로 충분히 대응하는 현대적 패턴입니다. 인라인 스타일 감소로 **JSX 가독성**도 향상되었으며, 스타일 변경 시 JSX를 수정하지 않아도 되므로 **뷰와 스타일의 분리**가 잘 이루어졌습니다.  

마지막으로, **유지보수와 확장성**이 크게 좋아졌습니다. 앞으로 디자인 스펙이 바뀌거나 새로운 UI 테마를 도입하더라도, 전역 CSS의 토큰 값만 조정하면 대부분 적용되며, 필요한 경우 컴포넌트에 data-attribute나 상태 클래스를 추가해서 CSS에서 제어할 수 있습니다. 예를 들어 여러 **Edge 테마 색상**을 지원하려면 Edge에 `data-color="pink"` 등을 넣고 CSS에서 `[data-color="pink"] path { stroke: ... }`로 관리하면 될 것입니다. 이러한 패턴은 이미 Shadcn UI 컴포넌트들이 data-state를 활용하는 방식과 일치하며, 정리된 구조 위에서 손쉽게 구현 가능합니다.  

정리하면, 이번 CSS 구조 개선으로 **스타일 코드의 중복을 제거**하고 **전역 일원화**를 달성했으며, Shadcn 디자인 시스템에 부합하는 방식으로 네이밍과 구조를 맞추어 **일관성 있는 스타일 관리**가 가능해졌습니다. 파일 구성도 단순해져 어떤 컴포넌트가 어떤 스타일에 영향을 받는지 명확하며 (위 ASCII 다이어그램 참조), 새로운 팀원이 합류하더라도 `globals.css`와 해당 컴포넌트 코드만 보면 스타일 흐름을 쉽게 파악할 수 있을 것입니다. 이러한 개선 사항을 문서화하여 공유함으로써, 팀 전체가 향후 CSS 작업 시 참고할 수 있도록 했습니다. 모든 수정 내역과 파일 구조 변화는 위와 같이 정리되었으며, 향후 이 구조를 기반으로 유지보수하면 효율적인 스타일 관리가 이루어질 것으로 기대합니다. ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=.card,color%200.2s%20ease%3B%20overflow%3A%20hidden)) ([codebase.md](file://file-MVuD5Z3iKqzapKTkio2qcX#:~:text=%7BnodeData.tags%20%26%26%20nodeData.tags.length%20,1%22%20%2F%3E%20%7Btag%7D%20%3C%2Fdiv))

