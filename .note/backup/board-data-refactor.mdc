---
description: 
globs: 
alwaysApply: false
---
**목표:** `useBoardData` 훅에서 직접 수행하던 데이터 로딩(API 호출), 상태 관리(로딩, 에러, 노드, 엣지), 로컬 스토리지 상호작용, 토스트 알림 로직을 `useBoardStore`의 액션으로 이전하여 관심사를 분리하고 테스트 용이성을 높입니다.

---

**리팩토링 계획: `useBoardData.ts`**

**현재 상태 분석:**

*   `useBoardData` 훅은 컴포넌트 마운트 시 또는 필요에 따라 `fetchBoardData` 함수를 호출합니다.
*   `fetchBoardData` 함수 내에서 다음 작업을 수행합니다:
    *   로컬 상태(`isLoading`, `error`) 관리
    *   `fetch('/api/cards')` API 직접 호출
    *   `useAppStore`의 `setCards` 액션 호출 (다른 스토어 직접 조작)
    *   `localStorage`에서 노드 위치, 엣지, 뷰포트(transform) 정보 직접 읽기
    *   API 응답과 저장된 데이터를 조합하여 `nodes`, `edges` 상태 생성 및 로컬 상태(`setNodes`, `setEdges`) 업데이트
    *   `reactFlowInstance`를 사용하여 뷰포트 직접 설정 (`setViewport`, `fitView`)
    *   `toast`를 사용하여 에러 메시지 직접 표시

**리팩토링 원칙 위반 사항:**

*   데이터 로딩(API 호출) 로직이 훅 내부에 존재합니다.
*   로컬 스토리지와의 직접적인 상호작용이 훅 내부에 존재합니다.
*   뷰포트 설정과 같은 UI 부작용 로직이 데이터 로딩 로직과 결합되어 있습니다.
*   다른 스토어(`useAppStore`)의 액션을 직접 호출합니다.
*   로딩/에러 상태 관리가 훅 내부에 지역적으로 존재합니다.
*   오류 발생 시 `toast` 알림이 훅 내부에서 직접 호출됩니다.

**리팩토링 목표:**

1.  데이터 로딩, 로컬 스토리지 처리, 상태 업데이트 로직을 `useBoardStore`의 새로운 비동기 액션(`loadBoardData`)으로 완전히 이전합니다.
2.  `useBoardData` 훅은 `useBoardStore`의 상태를 선택(select)하고, 필요시 `loadBoardData` 액션을 호출하는 역할만 수행하도록 단순화합니다. (궁극적으로 훅 자체가 불필요해질 수 있음)
3.  뷰포트 복원 로직은 액션이 상태를 설정하고, `Board` 컴포넌트의 `useEffect`가 해당 상태를 감지하여 처리하도록 분리합니다.
4.  `useAppStore.setCards` 호출을 제거하고, `cards` 상태 관리는 해당 스토어의 책임으로 명확히 합니다. (필요하다면 별도 동기화 액션 고려)

**세부 리팩토링 태스크 (Cursor Agent 용):**

1.  **`src/store/useBoardStore.ts` 파일 수정:**
    *   **상태 추가:** `BoardState` 인터페이스 및 초기 상태에 다음 필드를 추가합니다.
        ```typescript
        interface BoardState {
          // ... 기존 상태 ...
          isBoardLoading: boolean; // 기존 isLoading과 구분
          boardError: string | null;
          loadedViewport: Viewport | null; // 로드된 뷰포트 정보 저장
          needsFitView: boolean; // fitView 호출 필요 여부 플래그
        }

        // 초기 상태
        const initialState = {
          // ... 기존 초기 상태 ...
          isBoardLoading: true,
          boardError: null,
          loadedViewport: null,
          needsFitView: false,
        };
        ```
    *   **액션 정의:** `loadBoardData` 비동기 액션을 `BoardState` 인터페이스에 추가하고 구현합니다.
        ```typescript
        interface BoardState {
          // ...
          loadBoardData: () => Promise<void>;
        }

        // 스토어 구현 내부 (...) => ({ ... })
        loadBoardData: async () => {
          const { set, getState } = get(); // set과 get 가져오기
          set({ isBoardLoading: true, boardError: null, loadedViewport: null, needsFitView: false }); // 로딩 시작 및 상태 초기화

          try {
            // 1. API 호출
            const response = await fetch('/api/cards');
            if (!response.ok) {
              const errorData = await response.json().catch(() => ({})); // 에러 응답 파싱 시도
              throw new Error(errorData.error || `데이터 불러오기 실패 (상태: ${response.status})`);
            }
            const cards = await response.json();
            console.log('[loadBoardData Action] API 카드 데이터:', cards);

            // 참고: useAppStore.setCards 호출은 여기서 제거합니다.
            // cards 데이터는 useAppStore에서 별도로 로드하거나 동기화해야 합니다.

            // 2. 로컬 스토리지에서 노드 위치, 엣지, 뷰포트 정보 읽기
            let nodePositions: Record<string, { position: XYPosition }> = {};
            let savedEdges: Edge[] = [];
            let savedViewport: Viewport | null = null;

            try {
              const savedPositionsStr = localStorage.getItem(STORAGE_KEY);
              if (savedPositionsStr) nodePositions = JSON.parse(savedPositionsStr);

              const savedEdgesStr = localStorage.getItem(EDGES_STORAGE_KEY);
              if (savedEdgesStr) savedEdges = JSON.parse(savedEdgesStr);

              const transformString = localStorage.getItem(TRANSFORM_STORAGE_KEY);
              if (transformString) savedViewport = JSON.parse(transformString);
            } catch (err) {
              console.error('[loadBoardData Action] 로컬 스토리지 읽기 오류:', err);
              toast.error('저장된 보드 레이아웃을 불러오는 중 문제가 발생했습니다.');
              // 오류 발생 시 기본값 사용 또는 로직 중단은 정책에 따라 결정
            }

            // 3. 노드 데이터 생성 및 위치 적용
            const nodes: Node<CardData>[] = cards.map((card: any, index: number) => {
              const savedPosition = nodePositions[card.id]?.position;
              const position = savedPosition || { x: (index % 5) * 250, y: Math.floor(index / 5) * 150 }; // 기본 위치 계산
              return {
                id: card.id,
                type: NODE_TYPES_KEYS.card, // flow-constants에서 가져오기
                position,
                data: {
                  ...card,
                  tags: card.cardTags?.map((ct: any) => ct.tag.name) || [],
                },
                // 필요시 다른 노드 속성 추가 (width, height 등)
              };
            });

            // 4. 엣지 데이터 설정 (저장된 엣지 사용 및 설정 적용)
            const boardSettings = getState().boardSettings; // 현재 보드 설정 가져오기
            const finalEdges = applyEdgeSettings(savedEdges, boardSettings);

            // 5. 스토어 상태 업데이트
            set({
              nodes,
              edges: finalEdges,
              isBoardLoading: false,
              loadedViewport: savedViewport, // 로드된 뷰포트 정보 저장
              needsFitView: !savedViewport, // 저장된 뷰포트 없으면 fitView 필요
              boardError: null,
            });

            toast.success('보드 데이터를 성공적으로 불러왔습니다.');

          } catch (error: any) {
            console.error('[loadBoardData Action] 보드 데이터 로딩 실패:', error);
            set({ isBoardLoading: false, boardError: error.message });
            toast.error(`보드 데이터 로딩 실패: ${error.message}`);
          }
        },
        ```

2.  **`src/components/board/hooks/useBoardData.ts` 파일 리팩토링:**
    *   훅 내부의 `useState` (isLoading, error, nodes, edges)를 모두 제거합니다.
    *   `useAppStore`에서 `setCards` 호출 부분을 제거합니다.
    *   훅 내부의 `fetchBoardData` 함수를 완전히 제거합니다.
    *   `useBoardStore`에서 필요한 상태(`isBoardLoading`, `boardError`, `nodes`, `edges`)를 `selector`를 사용하여 가져옵니다.
    *   훅은 이제 `useBoardStore`의 상태를 반환하거나, 액션 트리거 함수(옵션)만 제공하도록 단순화합니다. (실제로는 이 훅이 더 이상 필요 없을 수 있습니다.)
        ```typescript
        import { useBoardStore } from '@/store/useBoardStore'; // 경로 수정 필요

        // 이 훅은 이제 Board 컴포넌트에서 직접 useBoardStore를 사용하는 것으로 대체될 수 있습니다.
        // 예시로 남겨둡니다.
        export function useBoardData() {
          const isBoardLoading = useBoardStore(state => state.isBoardLoading);
          const boardError = useBoardStore(state => state.boardError);
          const nodes = useBoardStore(state => state.nodes);
          const edges = useBoardStore(state => state.edges);
          const loadBoardData = useBoardStore(state => state.loadBoardData); // 액션 가져오기

          return {
            isBoardLoading,
            boardError,
            nodes, // 스토어에서 직접 가져옴
            edges, // 스토어에서 직접 가져옴
            loadBoardData, // 액션을 직접 노출
          };
        }
        ```

3.  **`src/components/board/components/Board.tsx` 파일 수정:**
    *   `useBoardData` 훅 사용 부분을 제거하거나 수정합니다.
    *   `useBoardStore`를 직접 사용하여 `nodes`, `edges`, `isBoardLoading`, `boardError`, `loadBoardData`, `loadedViewport`, `needsFitView` 상태 및 액션을 가져옵니다.
    *   `useEffect`를 추가하여 컴포넌트 마운트 시 `loadBoardData()` 액션을 호출합니다.
        ```typescript
        // 예시: Board.tsx 내부
        import { useBoardStore } from '@/store/useBoardStore'; // 경로 수정 필요

        // ... 컴포넌트 내부 ...
        const {
          nodes,
          edges,
          isBoardLoading,
          boardError,
          loadBoardData,
          loadedViewport,
          needsFitView,
          // ... 다른 상태 및 액션 ...
        } = useBoardStore();

        const { setViewport, fitView } = useReactFlow(); // reactFlowInstance 대신 직접 훅 사용 권장

        // 데이터 로딩 Effect
        useEffect(() => {
          loadBoardData(); // 마운트 시 데이터 로딩 액션 호출
        }, [loadBoardData]);

        // 뷰포트 복원/조정 Effect
        useEffect(() => {
          if (loadedViewport) {
            setViewport(loadedViewport, { duration: 0 }); // 저장된 뷰포트 복원
            // 복원 후 상태 초기화 (선택적)
             useBoardStore.setState({ loadedViewport: null });
          } else if (needsFitView) {
            fitView({ duration: 200, padding: 0.2 }); // fitView 실행
             // 실행 후 상태 초기화 (선택적)
             useBoardStore.setState({ needsFitView: false });
          }
        }, [loadedViewport, needsFitView, setViewport, fitView]);

        // ... 나머지 컴포넌트 로직 ...

        // BoardCanvas에 nodes, edges 등을 props로 전달
        // ...
        ```
    *   `BoardCanvas` 컴포넌트에 `isBoardLoading` 상태를 전달하여 로딩 인디케이터를 표시하도록 수정합니다.

4.  **테스트 코드 업데이트 (`useBoardStore.test.ts` 또는 관련 테스트 파일):**
    *   새로 추가된 `loadBoardData` 액션에 대한 단위 테스트를 작성합니다.
    *   MSW를 사용하여 `/api/cards` API 호출을 모킹합니다.
    *   `localStorage.getItem`을 모킹하여 저장된 노드/엣지/뷰포트 데이터를 시뮬레이션합니다.
    *   액션 실행 후 `useBoardStore`의 상태 (`isBoardLoading`, `boardError`, `nodes`, `edges`, `loadedViewport`, `needsFitView`)가 올바르게 변경되는지 검증합니다.
    *   `toast.success`, `toast.error`가 적절한 시점에 호출되는지 검증합니다.
    *   `Board.tsx` 컴포넌트 테스트를 업데이트하여 `loadBoardData` 액션 호출 여부 및 로딩 상태/데이터 표시를 검증합니다.