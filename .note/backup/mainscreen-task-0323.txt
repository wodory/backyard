# 프로젝트 관리 대시보드 UI 개발 테스크 리스트

## 특별 고려사항

- 모든 UI 요소는 플로팅 패널로 구현하여 시각적 일관성 유지
- 도구 막대와 패널은 3px 마진으로 간격 유지
- 캔버스 컴포넌트는 타 팀에서 개발 중인 컴포넌트와 통합 가능하도록 설계
- 오른쪽 패널은 카드 목록 및 카드 뷰어 두 가지 모드. 캔버스에서 카드를 선택하면 카드 콘텐츠 뷰어, 아니면 카드 목록. 
- 모든 아이콘은 60x60 크기로 구현. 외부에서 일러스트풍의 아이콘을 가져오기. 
- 사이드바는 슬라이딩 애니메이션으로 토글되도록 구현

## 1. 기본 레이아웃 및 컴포넌트 설정

- [ ] 필수 패키지 설치: React, Next.js, Tailwind CSS, Lucide React 아이콘, React Flow
- [ ] 추가 패키지 설치: zustand (상태 관리), framer-motion (애니메이션)
- [ ] 프로젝트 기본 구조 설정 (폴더 구조, 컴포넌트 분리 계획)
- [ ] 글로벌 스타일 및 Tailwind 설정 완료
- [ ] 공통 컴포넌트 생성 (버튼, 패널, 드롭다운 등)
- [ ] 반응형 레이아웃 기준 설정 (브레이크포인트, 크기 조정 정책)
- [ ] Zustand 스토어 구조 설계 및 초기 구현
  - [ ] 앱 상태 인터페이스 정의 (selectedCardId, isSidebarOpen 등)
  - [ ] 기본 액션 구현 (selectCard, toggleSidebar 등)

## 2. 플로팅 도구 막대 구현

- [ ] 좌측 도구 막대 컴포넌트 구현
  - [ ] 삼선 메뉴 아이콘과 프로젝트 제목 배치
  - [ ] 드롭다운 메뉴 기능 구현 (내보내기, 가져오기, 저장, 옵션, 로그아웃)
  - [ ] 각 메뉴 항목에 아이콘 추가
  - [ ] 외부 클릭 시 메뉴 닫기 기능

- [ ] 우측 도구 막대 컴포넌트 구현
  - [ ] 공유, 로그아웃, 설정 아이콘 배치
  - [ ] 아이콘 버튼에 호버 효과 추가
  - [ ] 각 버튼 기능 연결 준비

- [ ] 하단 중앙 도구 막대 컴포넌트 구현
  - [ ] 60x60 크기의 아이콘 버튼 구성
  - [ ] 새 카드, 수평 정렬, 수직 정렬, 요약 기능 아이콘 구현
  - [ ] 텍스트 레이블 추가
  - [ ] 화면 크기에 따른 위치 조정 로직 (오른쪽 패널 너비 고려)
  - [ ] 기존 레이아웃 옵션 메뉴 기능 통합

## 3. 메인 캔버스 영역 구현

- [ ] /board 통합
  - [ ] 기존 Board 컴포넌트를 MainCanvas 컴포넌트로 변환
  - [ ] 카드 선택 이벤트 구현 (Zustand 상태 업데이트)

- [ ] 통합 인터페이스
  - [ ] 외부 컴포넌트와의 연동 인터페이스 설계
  - [ ] 이벤트 처리 시스템 구축 (선택된 노드 정보 전달 등)
  - [ ] Zustand를 활용한 상태 관리 구현

## 4. 오른쪽 패널 구현

- [ ] 패널 기본 구조 및 스타일링
  - [ ] 플로팅 패널로 구현 (그림자, 둥근 모서리)
  - [ ] 적절한 마진 및 패딩 적용
  - [ ] 스크롤 처리
  - [ ] 카드를 선택하면 문서 콘텐츠, 카드를 선택하지 않았다면 카드 목록 
  - [ ] framer-motion을 활용한 슬라이딩 애니메이션 구현
  - [ ] 패널 토글 버튼 추가 및 기능 구현

- [ ] 카드 목록 구현
  - [ ] /cards 통합
  - [ ] 카드를 한 줄로 표시
  - [ ] 카드 선택 시 Zustand 상태 업데이트

- [ ] 카드 콘텐츠 뷰어 > 뷰어 헤더 구현
  - [ ] 선택한 카드의 contents = 문서
  - [ ] 문서 제목 및 작성자 정보 표시
  - [ ] 날짜 표시 (24.3.7 형식)
  - [ ] 스타일링 및 정렬

- [ ] 카드 콘텐츠 영역 구현
  - [ ] 콘텐츠 표시 영역 설계
  - [ ] 선택된 노드에 따른 콘텐츠 렌더링 로직
  - [ ] 콘텐츠 포맷팅 지원 (tiptap viewer)

## 5. 상태 관리 및 데이터 연동

- [ ] Zustand 상태 관리 구현
  - [ ] 현재 선택된 노드 상태 관리
  - [ ] 사이드바 열림/닫힘 상태 관리
  - [ ] 프로젝트 메타데이터 상태 관리
  - [ ] UI 상태 관리 (패널 표시 여부, 메뉴 열림 상태 등)
  - [ ] 상태 지속성 설정 (localStorage 연동)

- [ ] API 연동 설계
  - [ ] 데이터 가져오기/저장 인터페이스
  - [ ] 다른 프로젝트 컴포넌트와의 통신 방식 정의
  - [ ] 에러 처리 및 로딩 상태 관리
  - [ ] Zustand 상태와 API 데이터 동기화 로직

## 6. 확장성 및 통합

- [ ] 확장 가능한 플러그인 아키텍처 설계
  - [ ] 외부 컴포넌트 로딩 메커니즘
  - [ ] 이벤트 버스 구현
  - [ ] 공통 인터페이스 정의

- [ ] 기존 컴포넌트와의 통합
  - [ ] 컴포넌트 간 데이터 공유 방식
  - [ ] 일관된 스타일링 적용
  - [ ] 성능 최적화 전략

## 7. 성능 최적화

- [ ] ReactFlow 성능 최적화
  - [ ] 대량의 노드/에지 처리 시 가상화 적용
  - [ ] 불필요한 리렌더링 방지를 위한 메모이제이션
  - [ ] 지연 로딩 전략 구현

- [ ] 애니메이션 최적화
  - [ ] 하드웨어 가속 활용 (transform, opacity 속성 우선 사용)
  - [ ] 애니메이션 프레임 최적화
  - [ ] 낮은 사양 디바이스에서의 성능 테스트

## 8. 마무리 및 검증

- [ ]
- [ ] 크로스 브라우저 테스트
- [ ] 접근성 검사 및 개선
- [ ] 성능 최적화 (메모이제이션, 코드 스플리팅 등)
- [ ] 코드 리팩토링 및 정리
- [ ] 문서화 (개발자 가이드, API 문서 등)

## 9. 구현 단계 및 예상 시간

### 1단계: 기본 레이아웃 및 상태 관리 설정 (2-3시간)
- Zustand 스토어 생성
- 메인 레이아웃 컴포넌트 구현
- Next.js 라우팅 조정 (app/page.tsx를 메인으로)

### 2단계: 핵심 컴포넌트 구현 (4-5시간)
- 사이드바 컴포넌트 (토글 기능 포함)
- 메인 캔버스 구현 (기존 board 컴포넌트 통합)
- 툴바 컴포넌트 (상단, 하단)

### 3단계: 기능 연동 및 최적화 (3-4시간)
- 카드 선택 시 사이드바 전환 로직 구현
- 반응형 레이아웃 조정
- 성능 최적화

### 총 예상 시간: 9-12시간

## 특별 고려사항

- 모든 UI 요소는 플로팅 패널로 구현하여 시각적 일관성 유지
- 도구 막대와 패널은 3px 마진으로 간격 유지
- 캔버스 컴포넌트는 타 팀에서 개발 중인 컴포넌트와 통합 가능하도록 설계
- 문서 뷰어는 캔버스에서 선택된 노드 데이터와 연동되도록 구현
- 모든 아이콘은 60x60 크기로 일관성 있게 구현
- Zustand를 활용한 명확한 상태 관리로 코드 복잡성 감소
- framer-motion을 활용한 부드러운 애니메이션 구현