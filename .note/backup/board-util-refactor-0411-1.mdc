---
description: 
globs: 
alwaysApply: false
---
**목표:** `useBoardUtils` 훅에 혼재된 보드 설정 관리(로딩, 저장, API 호출), 레이아웃 적용, 뷰포트 저장/복원 로직을 `useBoardStore` 액션으로 이전하여 관심사를 분리하고, 훅의 역할을 단순화하거나 제거합니다.

---

**리팩토링 계획: `useBoardUtils.ts`**

**현재 상태 분석:**

*   `useBoardUtils` 훅은 보드 설정 로딩/저장(API 호출 포함), 레이아웃 계산 및 적용, 뷰포트 로컬 스토리지 관리 등 다양한 책임을 가지고 있습니다.
*   훅 내부에서 `useAppStore` (보드 설정용), `useReactFlow`, 외부 유틸리티 함수, 로컬 스토리지 API를 직접 사용합니다.
*   `setNodes`, `setEdges` 같은 상태 설정 함수를 직접 호출하여 상태를 변경합니다.
*   API 호출, 로컬 스토리지 접근, 상태 업데이트, `toast` 알림 로직이 훅 내부에 섞여 있습니다.

**리팩토링 원칙 위반 사항:**

*   API 호출 및 로컬 스토리지 접근 로직(Side Effects)이 훅 내부에 존재합니다.
*   레이아웃 계산 후 상태(`nodes`, `edges`)를 직접 변경하는 로직이 훅 내부에 존재합니다.
*   다른 스토어(`useAppStore`)의 상태를 사용하고, 로컬 상태(`setNodes`, `setEdges`)와 혼용하여 관리합니다. (보드 설정 상태는 `useBoardStore`로 이전하는 것이 더 적합해 보입니다.)
*   오류 처리 및 `toast` 알림 로직이 훅 내부에 존재합니다.

**리팩토링 목표:**

1.  `useBoardUtils` 훅에 정의된 함수들의 핵심 로직(상태 변경, API 호출, 로컬 스토리지 접근, 토스트 알림)을 `useBoardStore`의 액션으로 이전합니다.
2.  보드 설정(`boardSettings`) 상태는 `useAppStore` 대신 `useBoardStore`에서 관리하도록 이전하고 관련 액션도 함께 옮깁니다. (`useAppStore`는 앱 전반의 UI 상태 등에 집중)
3.  레이아웃 계산 유틸리티(`getLayoutedElements`, `getGridLayout`)는 순수 함수로 유지하되, 액션 내부에서 호출하여 상태를 업데이트하도록 변경합니다.
4.  뷰포트 저장/복원 로직은 액션에서 로컬 스토리지를 처리하고, 실제 뷰포트 적용은 상태 변경을 감지한 컴포넌트의 `useEffect`에서 수행하도록 분리합니다.
5.  `useBoardUtils` 훅은 최종적으로 제거하거나, 꼭 필요한 순수 유틸리티 함수만 남겨두는 형태로 단순화합니다.

**세부 리팩토링 태스크 (Cursor Agent 용):**

1.  **`src/store/useBoardStore.ts` 파일 수정:**
    *   **상태 추가/이전:**
        *   `useAppStore`의 `boardSettings` 상태와 관련 타입(`BoardSettings`)을 `useBoardStore`로 **이전**합니다. 초기값은 `DEFAULT_BOARD_SETTINGS` 또는 로컬 스토리지에서 로드하는 로직을 포함할 수 있습니다.
        *   `BoardState` 인터페이스에 `viewportToRestore: Viewport | null` 상태를 추가합니다. (뷰포트 복원용)
        *   `BoardState` 인터페이스에 `isSettingsLoading: boolean`, `settingsError: string | null` 상태를 추가합니다. (설정 로딩/저장용)
        *   `hasUnsavedChanges` 상태를 추가하여 변경사항 추적을 스토어에서 관리합니다.
    *   **액션 정의 및 구현:**
        *   **`loadAndApplyBoardSettings(userId: string): Promise<void>`**:
            *   `isSettingsLoading`을 true로 설정합니다.
            *   `loadBoardSettingsFromServer(userId)` 유틸리티 함수를 호출하여 서버에서 설정을 가져옵니다.
            *   가져온 설정 또는 기본 설정으로 `boardSettings` 상태를 업데이트 (`set` 사용)하고, `localStorage`에도 저장 (`saveBoardSettings` 유틸리티 사용).
            *   `applyEdgeSettings` 유틸리티를 사용하여 현재 `edges` 상태에 새 설정을 적용하고 `set({ edges: updatedEdges })`를 호출합니다.
            *   성공/실패 시 `isSettingsLoading`, `settingsError` 상태를 업데이트하고 `toast` 알림을 호출합니다.
        *   **`updateAndSaveBoardSettings(newSettings: Partial<BoardSettings>, userId?: string): Promise<void>`**:
            *   기존 `boardSettings`와 `newSettings`를 병합합니다.
            *   `isSettingsLoading`을 true로 설정합니다.
            *   병합된 설정으로 `boardSettings` 상태를 업데이트합니다.
            *   `applyEdgeSettings`를 사용하여 `edges` 상태를 업데이트합니다.
            *   `saveBoardSettings` 유틸리티를 사용하여 로컬 스토리지에 저장합니다.
            *   `userId`가 있으면 `saveBoardSettingsToServer` 유틸리티를 호출하여 서버에도 저장합니다.
            *   성공/실패 시 `isSettingsLoading`, `settingsError` 상태를 업데이트하고 `toast` 알림을 호출합니다.
        *   **`applyLayout(direction: 'horizontal' | 'vertical' | 'auto'): void`**:
            *   `getState()`로 현재 `nodes`, `edges`, `boardSettings` (노드 크기 등) 상태를 가져옵니다.
            *   `direction` 값에 따라 `getLayoutedElements` 또는 `getGridLayout` 유틸리티 함수를 호출하여 새로운 노드 위치를 계산합니다.
            *   계산된 `layoutedNodes`로 `nodes` 상태를 업데이트 (`set({ nodes: layoutedNodes })`)합니다.
            *   레이아웃 적용 후 `hasUnsavedChanges`를 true로 설정합니다.
            *   `toast.info`로 레이아웃 적용 완료 알림을 호출합니다.
        *   **`saveBoardState(): boolean`**:
            *   `getState()`로 현재 `nodes`, `edges` 상태를 가져옵니다.
            *   `saveAllLayoutData` 유틸리티 함수를 호출하여 노드 위치와 엣지를 로컬 스토리지에 저장합니다.
            *   성공 시 `hasUnsavedChanges`를 false로 설정하고 `toast.success` 알림을 호출합니다. 실패 시 `toast.error`를 호출합니다.
            *   성공 여부를 반환합니다.
        *   **`saveAndViewport(): void`**:
            *   `useReactFlow` 훅을 직접 사용할 수 없으므로, 이 액션은 뷰포트 객체를 인자로 받거나, `reactFlowInstance`를 스토어 상태로 관리해야 합니다 (후자는 권장하지 않음). **대안:** 컴포넌트에서 뷰포트 정보를 가져와 `localStorage`에 직접 저장하는 로직은 유지하거나, 뷰포트 상태를 스토어에서 관리하고 액션이 해당 상태를 저장하도록 변경합니다. 여기서는 `localStorage` 직접 저장을 액션으로 옮깁니다.
            *   `const viewport = get().reactFlowInstance?.getViewport();` (만약 인스턴스를 저장했다면) 또는 `saveAndViewport(viewport: Viewport)` 형태로 구현합니다.
            *   `localStorage.setItem(TRANSFORM_STORAGE_KEY, JSON.stringify(viewport));` 로직을 수행합니다.
            *   `toast.info`로 뷰포트 저장 알림을 호출합니다.
        *   **`restoreViewport(): void`**:
            *   `localStorage.getItem(TRANSFORM_STORAGE_KEY)`로 저장된 뷰포트 정보를 읽습니다.
            *   파싱에 성공하면 `set({ viewportToRestore: parsedViewport })`를 호출하여 복원할 뷰포트 상태를 설정합니다.
            *   실패 시 `toast.error`를 호출합니다.

2.  **`src/components/board/hooks/useBoardUtils.ts` 파일 리팩토링:**
    *   훅 내부의 모든 함수(`loadBoardSettingsFromServerIfAuthenticated`, `updateBoardSettings`, `applyLayout`, `applyGridLayout`, `saveViewport`, `loadViewport`, `saveAllLayoutData`)를 **제거**합니다.
    *   `useAppStore`에서 `boardSettings` 관련 상태를 가져오는 부분을 제거합니다.
    *   훅의 반환 값을 비우거나, 훅 자체를 사용하지 않도록 변경합니다.

3.  **`src/components/board/components/Board.tsx` (또는 관련 컴포넌트) 파일 수정:**
    *   `useBoardUtils` 훅 사용 부분을 제거합니다.
    *   `useBoardStore`에서 필요한 상태(`nodes`, `edges`, `boardSettings`, `viewportToRestore` 등)와 액션(`loadAndApplyBoardSettings`, `updateAndSaveBoardSettings`, `applyLayout`, `saveBoardState` 등)을 직접 가져와 사용합니다.
    *   `useEffect`를 사용하여 `viewportToRestore` 상태 변경을 감지하고, 변경 시 `reactFlowInstance.setViewport(viewportToRestore)`를 호출하여 실제 뷰포트를 적용한 후, `set({ viewportToRestore: null })`을 호출하여 상태를 초기화합니다.
    *   툴바 등에서 레이아웃 적용/저장 버튼 클릭 시 해당 Zustand 액션을 호출하도록 수정합니다.
    *   초기 설정 로딩을 위해 `useEffect`에서 `loadAndApplyBoardSettings` 액션을 호출합니다. (인증 상태 및 사용자 ID 필요)

4.  **`src/components/board/utils/graphUtils.ts` 파일 검토:**
    *   `saveLayout`, `saveEdges`, `saveAllLayoutData` 함수가 `localStorage`를 직접 조작합니다. 이 함수들은 이제 `useBoardStore` 액션 내부에서만 호출되어야 합니다. 함수 자체는 유지하되, 호출 위치를 변경합니다.

5.  **`src/components/layout/ProjectToolbar.tsx` 파일 수정:**
    *   보드 설정 관련 UI (드롭다운 메뉴 등)에서 상태를 표시할 때는 `useBoardStore`의 `boardSettings`를 사용합니다.
    *   설정 변경 시 `useBoardStore`의 `updateAndSaveBoardSettings` 액션을 호출합니다.
    *   `handleSaveLayout` 함수 대신 `useBoardStore`의 `saveBoardState` 액션을 호출합니다.

6.  **테스트 코드 업데이트:**
    *   `useBoardStore.test.ts`에 새로 추가/변경된 액션들에 대한 단위 테스트를 작성합니다. MSW를 사용하여 API 호출(`saveBoardSettingsToServer`, `loadBoardSettingsFromServer`)을 모킹하고, `localStorage` 상호작용을 검증합니다.
    *   `Board.tsx`, `ProjectToolbar.tsx` 등 관련 컴포넌트 테스트에서 `useBoardStore`를 모킹하고, 액션 호출 여부 및 상태 변화에 따른 UI 업데이트를 검증합니다. `useBoardUtils` 훅 대신 스토어 상태/액션이 올바르게 사용되는지 확인합니다.