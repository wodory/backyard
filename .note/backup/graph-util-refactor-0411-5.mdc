---
description: 
globs: 
alwaysApply: false
---
알겠습니다. `src/components/board/utils/graphUtils.ts` 파일의 리팩토링 계획을 'zustand-action-msw.mdc' 원칙에 맞춰 Cursor Agent가 이해하기 쉽게 작성해 드릴게요.

**목표:** `graphUtils.ts` 파일 내 함수들이 직접 로컬 스토리지에 접근하는 Side Effect를 제거하고, 이 함수들을 순수 유틸리티 함수로 유지하거나, 로컬 스토리지 조작 로직을 `useBoardStore` 액션 내부로 완전히 이동시킵니다.

---

**리팩토링 계획: `graphUtils.ts`**

**현재 상태 분석:**

*   `graphUtils.ts` 파일에는 `saveLayout`, `saveEdges`, `saveAllLayoutData`, `removeDeletedNodesFromStorage` 등의 함수가 정의되어 있습니다.
*   이 함수들은 `localStorage.setItem` 또는 `localStorage.getItem`/`removeItem`을 직접 호출하여 로컬 스토리지에 접근하고 데이터를 조작합니다. 이는 Side Effect에 해당합니다.
*   함수 시그니처는 주로 노드나 엣지 배열을 인자로 받습니다.

**리팩토링 원칙 위반 사항:**

*   순수 유틸리티 함수여야 할 파일 내부에 Side Effect(로컬 스토리지 접근)가 포함되어 있습니다. 'zustand-action-msw.mdc' 원칙에 따라 Side Effect는 Zustand 액션 내에서 관리되어야 합니다.
*   테스트 시 로컬 스토리지 모킹이 필요하며, 함수의 단일 책임 원칙에 위배될 수 있습니다.

**리팩토링 목표:**

1.  `graphUtils.ts`의 함수들에서 `localStorage` 관련 코드를 **제거**합니다.
2.  로컬 스토리지 저장/삭제 로직은 해당 기능을 책임지는 `useBoardStore` 액션(예: `saveNodesAction`, `saveEdgesAction`, `removeNodesAndRelatedEdgesFromStorage`) 내부로 **완전히 이동**시킵니다.
3.  `graphUtils.ts`에는 로컬 스토리지와 무관한 순수 그래프 처리 유틸리티 함수만 남기거나, 해당 함수들이 더 이상 필요 없다면 파일을 제거합니다. (예: 특정 노드/엣지 필터링, 데이터 변환 등)

**세부 리팩토링 태스크 (Cursor Agent 용):**

1.  **`src/components/board/utils/graphUtils.ts` 파일 수정:**
    *   **`saveLayout` 함수 수정:**
        *   함수 내부의 `localStorage.setItem(STORAGE_KEY, ...)` 라인을 **제거**합니다.
        *   함수의 목적을 '노드 위치 데이터 포맷팅'으로 변경하고, 포맷팅된 데이터를 **반환**하도록 수정합니다. (또는 이 함수 자체가 불필요하면 제거)
        ```typescript
        // 변경 전 예시
        // export const saveLayout = (nodes: Node[]): boolean => {
        //   try {
        //     const nodePositions = ...; // 위치 정보 추출
        //     localStorage.setItem(STORAGE_KEY, JSON.stringify(nodePositions)); // 제거 대상
        //     return true;
        //   } catch (err) { return false; }
        // };

        // 변경 후 예시 (포맷팅 로직만 남김)
        export const formatNodePositionsForStorage = (nodes: Node[]): Record<string, { position: XYPosition }> => {
          return nodes.reduce((acc: Record<string, { position: XYPosition }>, node: Node) => {
            acc[node.id] = { position: node.position };
            return acc;
          }, {});
        };

        // 또는, 이 로직이 간단하면 액션 내부에서 직접 처리하고 함수 제거
        ```
    *   **`saveEdges` 함수 수정:**
        *   함수 내부의 `localStorage.setItem(EDGES_STORAGE_KEY, ...)` 라인을 **제거**합니다.
        *   이 함수는 단순히 엣지 배열을 받는 역할이었으므로, 로컬 스토리지 로직 제거 후에는 특별한 변환이 없다면 함수 자체를 **제거**하는 것을 고려합니다.
    *   **`saveAllLayoutData` 함수 수정:**
        *   `saveLayout` 및 `saveEdges` 함수 호출 부분을 **제거**합니다.
        *   이 함수는 두 저장 로직을 묶는 역할이었으므로, 해당 로직이 액션으로 이동하면 이 함수도 **제거**합니다.
    *   **`removeDeletedNodesFromStorage` 함수 수정:**
        *   함수 내부의 `localStorage.getItem`, `JSON.parse`, `Object.fromEntries`, `localStorage.setItem`, `localStorage.removeItem` 등 로컬 스토리지 관련 코드를 **모두 제거**합니다.
        *   이 함수의 로직은 `useBoardStore`의 `removeNodesAndRelatedEdgesFromStorage` 액션으로 완전히 이동되므로, 이 함수도 **제거**합니다.
    *   **결론:** 리팩토링 후 `graphUtils.ts` 파일에는 로컬 스토리지와 관련된 함수가 남아있지 않아야 합니다. 순수 그래프 계산 유틸리티가 없다면 파일 자체가 제거될 수 있습니다.

2.  **`src/store/useBoardStore.ts` 파일 수정 (관련 액션 확인 및 수정):**
    *   **`saveNodesAction` 액션 확인/수정:**
        *   액션 내부에서 `formatNodePositionsForStorage` (변경된 `saveLayout`) 유틸리티를 호출하여 저장할 데이터를 얻습니다.
        *   `localStorage.setItem(STORAGE_KEY, JSON.stringify(formattedData));` 코드를 사용하여 로컬 스토리지에 **직접 저장**합니다.
        *   기존 `saveLayout` 호출 부분을 제거합니다.
        ```typescript
        // saveNodesAction 예시
        saveNodesAction: (): boolean => {
          const { nodes } = get();
          try {
            const formattedData = formatNodePositionsForStorage(nodes); // 유틸리티 사용
            localStorage.setItem(STORAGE_KEY, JSON.stringify(formattedData)); // 액션 내에서 직접 저장
            set({ hasUnsavedChanges: false });
            toast.success('노드 위치가 저장되었습니다.');
            return true;
          } catch (error) {
            console.error('노드 위치 저장 실패:', error);
            toast.error('노드 위치 저장에 실패했습니다.');
            return false;
          }
        },
        ```
    *   **`saveEdgesAction` 액션 확인/수정:**
        *   액션 내부에서 `getState().edges`를 가져옵니다.
        *   `localStorage.setItem(EDGES_STORAGE_KEY, JSON.stringify(edges));` 코드를 사용하여 로컬 스토리지에 **직접 저장**합니다.
        *   기존 `saveEdges` 호출 부분을 제거합니다.
        ```typescript
        // saveEdgesAction 예시
        saveEdgesAction: (): boolean => {
          const { edges } = get();
          try {
            localStorage.setItem(EDGES_STORAGE_KEY, JSON.stringify(edges)); // 액션 내에서 직접 저장
            // set({ hasUnsavedChanges: false }); // 노드 저장과 함께 처리될 수 있음
            toast.success('연결 정보가 저장되었습니다.');
            return true;
          } catch (error) {
            console.error('엣지 저장 실패:', error);
            toast.error('엣지 저장에 실패했습니다.');
            return false;
          }
        },
        ```
    *   **`saveBoardState` 액션 확인/수정:** (만약 `saveAllLayoutData`를 대체하는 액션이라면)
        *   액션 내부에서 `saveNodesAction`과 `saveEdgesAction`의 로직 (로컬 스토리지 저장)을 **직접 수행**하도록 통합합니다.
        *   `saveLayout`, `saveEdges`, `saveAllLayoutData` 유틸리티 호출을 제거합니다.
    *   **`removeNodesAndRelatedEdgesFromStorage` 액션 확인/수정:**
        *   기존 `graphUtils.ts`의 `removeDeletedNodesFromStorage` 함수 내용을 이 액션 내부로 **완전히 가져옵니다**. (`localStorage.getItem`, `JSON.parse`, 필터링, `localStorage.setItem` 등)
        *   해당 유틸리티 함수 호출 부분을 제거합니다.

3.  **호출부 수정:**
    *   `useNodes.ts`, `useEdges.ts`, `useBoardUtils.ts` 등에서 `graphUtils.ts`의 함수(이제 제거되었거나 변경된)를 호출하는 부분을 찾습니다.
    *   해당 호출을 제거하고, 대신 `useBoardStore`의 해당 액션(예: `saveNodesAction`, `saveEdgesAction`, `saveBoardState`)을 호출하도록 수정합니다.

4.  **테스트 코드 업데이트:**
    *   `graphUtils.test.ts` (존재한다면) 파일의 테스트 내용을 수정하거나 제거합니다. 로컬 스토리지 접근 테스트는 이제 `useBoardStore.test.ts`에서 수행되어야 합니다. `formatNodePositionsForStorage`와 같은 순수 함수 테스트만 남깁니다.
    *   `useBoardStore.test.ts`에서 로컬 스토리지 저장/삭제 관련 액션 테스트 시, `localStorage.setItem`, `getItem`, `removeItem`이 올바른 키와 값으로 호출되는지 `vi.spyOn` 등을 사용하여 검증합니다.

---

이 계획을 따르면 `graphUtils.ts`는 순수 유틸리티 함수의 역할에 충실하게 되거나 제거되고, 로컬 스토리지 관련 Side Effect는 모두 `useBoardStore` 액션으로 중앙화되어 코드의 책임 분리가 명확해지고 테스트가 용이해집니다.