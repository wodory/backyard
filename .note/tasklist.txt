[ ] 카드 보드의 카드 구조
- 카드 보드의 카드는 해더와 콘텐츠 영억으로 나뉜다
- 카드는 접고 펼수 있다. 기본값은 접은 상태이다.
- 카드를 접으면 카드는 헤더 영역만 표시한다
  - 카드 헤더에는 카드 제목을 중앙 정렬로 표시하고, 맨 오른쪽에는 [펴기] 단추를 [>] 모양으로 표시한다.
  - [>] 단추를 클릭하면 카드는 펴진다. 
- 카드가 펴지면 컨텐츠 영역도 보여준다
  - 카드 헤더의 [>] 단추는 [^] 단추 = 접기 단추로 바뀐다.
  - 컨텐츠 영역에는 tiptap 뷰어를 표시하고 카드 내용을 표시한다. 
  - 글꼴 크기는 카드 목록보다 60% 수준으로 표시한다. 
  - 카드가 펴질 때 컨텐츠 영역의 최대 높이는 280px로 정한다.  
  - 컨텐츠 영역보다 표시해야 할 카드 내용이 많으면 ... 처리한다. 
- 왼쪽/오른쪽의 연결선 핸들러는 카드가 접히고 펴질 때 마다 위치를 카드 중앙으로 이동한다. 

[ ] 카드 상태
- 카드에 표시하는 다양한 UI와 동작을 카드의 상태별로 다르게 할 가능성이 있음
- 카드 상태를 기본, 마우스 호버, 선택으로 분리.

[ ] 카드 상태 - normal
- 연결선 핸들러 표시하지 않음

[ ] 카드 상태 - hover
- 연결선 핸들러 표시 
- 연결선 핸들러 색상은 연결선과 동일
- UI 변경
  -- 외곽선 : 밝은 핑크색
  -- 카드 배경색 : 

[ ] 카드 상태 - selected 
- 선택 상태는 클릭 혹은 선택 range 내부에 들어왔을 때
- 선택 상태의 UI 변경
  -- 외곽선 : 일반 카드 외곽선 + 2px, 색은 연결선 색과 동일
  -- 카드 배경색 : 초기값은 연결선 색의 밝기 60% 증가 
  -- 변경하는 UI의 값은 모두 환경 변수로 설정. 이후 UI로 바꿀 수 있어야 함. 
- 외곽선을 표시해도 연결선 핸들러가 선 가운데에 올 수 있도록 border 옵션 조절
- 연결선 핸들러 표시
- 연결선 핸들러 색상은 연결선과 동일

[ ] 카드 클릭, 선택
- 카드 위를 클릭하면 카드 선택 상태가 된다
- 카드를 드래스, 클릭, 선택하면 z-index가 가장 높다.




** 토요일 - 원격 환경 적용 및 인증 ** 

**Supabase**
- PW : $JpH_w$9WKrriPR
- Project URL : https://btdartpjjrkwgfejqnsn.supabase.co
- anon : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ0ZGFydHBqanJrd2dmZWpxbnNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE0MTE2NTAsImV4cCI6MjA1Njk4NzY1MH0.J_wJ0zJz0zlePBAf8HdwfupA8auvtDr3NhDFvZoZQk4

**google OAuth ID/Password**
{"web":{"client_id":"545502090118-t5kccm1dguqbvbo8eovcoms71n4vem1e.apps.googleusercontent.com","project_id":"backyard-453110","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","redirect_uris":["https://backyard-orpin.vercel.app/"],"javascript_origins":["http://localhost:3000"]}}


## 1. Vercel에 퍼블리시하기

### 퍼블리시 준비 단계 테스트
- [ ] 로컬 환경에서 애플리케이션이 오류 없이 빌드되는지 확인
  - `npm run build` 또는 `yarn build` 명령으로 빌드 오류 확인
- [ ] 환경 변수가 `.env.local`이나 `.env` 파일에 올바르게 설정되어 있는지 확인
- [ ] 프로젝트의 `package.json`에 필요한 스크립트와 의존성이 모두 포함되어 있는지 확인

### Git-Vercel 연동 관리
- [ ] Git push 시 Vercel 자동 배포 설정/해제 방법 확인
- [  ] CLI 기반 수동 배포 명령어 (vercel 또는 npx vercel) 작동 확인
- [ ] 배포 오류 시 디버깅 로그 확인 방법 테스트

## 프로덕션 환경 변수 테스트
- [ ] .env.production 파일에 Supabase 연결 정보가 올바르게 구성되었는지 확인
- [ ] Vercel 대시보드에서 환경 변수가 올바르게 설정되었는지 확인
- [ ] 프로덕션 환경에서 Supabase와 로컬 DB 연결이 정상 작동하는지 확인

### Vercel 배포 테스트
- [ ] Vercel 계정 생성 및 로그인이 정상적으로 되는지 확인
- [ ] GitHub/GitLab 저장소와 Vercel 프로젝트가 올바르게 연결되는지 확인
- [ ] Vercel CLI를 통한 배포가 정상적으로 진행되는지 확인 (`vercel` 명령어)
- [ ] Vercel 환경 변수 설정이 올바르게 되었는지 확인

### 배포 후 테스트
- [ ] 배포된 URL에서 웹사이트가 정상적으로 로딩되는지 확인
- [ ] 모든 페이지와 라우트가 정상적으로 동작하는지 확인
- [ ] 이미지, 폰트 등의 정적 자원이 올바르게 로드되는지 확인
- [ ] 반응형 디자인이 다양한 디바이스에서 올바르게 표시되는지 확인

## 2. DB를 Supabase SaaS로 교체하기

### Supabase 설정 테스트
- [ ] Supabase 계정 생성 및 새 프로젝트 생성이 정상적으로 되는지 확인
- [ ] Supabase 프로젝트의 데이터베이스 연결 정보를 올바르게 가져왔는지 확인
- [ ] Supabase JavaScript 클라이언트 라이브러리가 정상적으로 설치되는지 확인
  - `npm install @supabase/supabase-js` 또는 `yarn add @supabase/supabase-js`

### 데이터 마이그레이션 테스트
- [ ] 기존 데이터베이스 스키마를 Supabase에 맞게 설계했는지 확인
- [ ] 데이터 마이그레이션 스크립트가 정상적으로 작동하는지 확인
- [ ] 마이그레이션 후 데이터 무결성이 유지되는지 확인

### Supabase 연동 테스트
- [ ] Supabase 클라이언트 초기화가 올바르게 되는지 확인
```javascript
const supabaseClient = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);
```
- [ ] 데이터 조회(SELECT) 쿼리가 정상적으로 작동하는지 확인
- [ ] 데이터 생성(INSERT) 쿼리가 정상적으로 작동하는지 확인
- [ ] 데이터 수정(UPDATE) 쿼리가 정상적으로 작동하는지 확인
- [ ] 데이터 삭제(DELETE) 쿼리가 정상적으로 작동하는지 확인
- [ ] Supabase RLS(Row Level Security)가 올바르게 설정되었는지 확인

### 오류 처리 테스트
- [ ] 데이터베이스 연결 실패 시 적절한 오류 메시지가 표시되는지 확인
- [ ] 쿼리 실패 시 사용자에게 친절한 오류 메시지가 제공되는지 확인
- [ ] 네트워크 오류 시 재시도 메커니즘이 작동하는지 확인

## Supabase와 로컬 DB 사용자 동기화 테스트
- [ ] Supabase 인증 사용자 정보가 로컬 데이터베이스에 자동으로 동기화되는지 확인
- [ ] 사용자 로그인 시 존재하지 않는 사용자는 자동 등록되는지 확인
- [ ] 동기화 실패 시 대체 로직(fallback)이 정상 작동하는지 확인

## Next.js 15 쿠키 처리 테스트
- [ ] 서버 컴포넌트(layout.tsx)에서 쿠키 설정 방식이 올바르게 구현되었는지 확인
- [ ] 미들웨어에서 쿠키 처리가 Next.js 15 방식으로 올바르게 수행되는지 확인
- [ ] "@supabase/ssr: createServerClient was configured without set and remove cookie methods" 경고가 해결되었는지 확인

## 미들웨어 인증 강화 테스트
- [ ] 미들웨어에서 보안 관련 쿠키 옵션(secure, sameSite, httpOnly)이 올바르게 설정되었는지 확인
- [ ] 세션 기반 인증 상태 확인 로직이 정상 작동하는지 확인
- [ ] 디버깅 로그가 적절하게 기록되는지 확인

## Prisma 환경 설정 테스트
- [ ] schema.prisma 파일이 다중 환경(개발/프로덕션)을 지원하도록 설정되었는지 확인
- [ ] 환경에 따른 데이터베이스 프로바이더(SQLite/PostgreSQL) 전환이 정상 작동하는지 확인
- [ ] 배포 전 스크립트에서 사용하는 패키지들이 존재하는지 확인

## 배포 스크립트 오류 처리
- [ ] pre-deploy.js 스크립트가 오류 발생 시에도 배포 과정을 중단하지 않도록 수정
- [ ] 스키마 동기화 실패 시 적절한 오류 처리 방법 구현

## 3. Google 원격 인증 붙이기

### Google OAuth 설정 테스트
- [ ] Google Cloud Console에서 OAuth 클라이언트 ID와 비밀키를 올바르게 생성했는지 확인
- [ ] 리디렉션 URI가 올바르게 설정되었는지 확인 (로컬 개발 및 Vercel 배포 URL 모두)
- [ ] 필요한 OAuth 스코프(이메일, 프로필 등)가 올바르게 지정되었는지 확인

### Supabase Auth 연동 테스트
- [ ] Supabase 프로젝트에서 Google OAuth 제공자가 올바르게 구성되었는지 확인
- [ ] Supabase Auth API를 사용한 Google 로그인 코드가 정상적으로 작동하는지 확인
```javascript
const { user, session, error } = await supabase.auth.signIn({
  provider: 'google',
});
```

### 인증 흐름 테스트
- [ ] 로그인 버튼 클릭 시 Google 로그인 페이지로 정상적으로 리디렉션되는지 확인
- [ ] Google 계정으로 성공적으로 로그인 후 애플리케이션으로 리디렉션되는지 확인
- [ ] 사용자 정보(이메일, 이름 등)가 올바르게 가져와지는지 확인
- [ ] 로그인 상태가 애플리케이션 전체에서 올바르게 유지되는지 확인
- [ ] 로그아웃 기능이 정상적으로 작동하는지 확인

### 인증 상태 관리 테스트
- [ ] 새로고침 후에도 로그인 상태가 유지되는지 확인
- [ ] 세션 토큰이 올바르게 저장되고 관리되는지 확인
- [ ] 인증이 필요한 페이지에 비로그인 사용자 접근 시 적절히 처리되는지 확인
- [ ] 인증된 사용자만 특정 API를 호출할 수 있는지 확인

### 사용자 경험 테스트
- [ ] 로그인 및 로그아웃 과정이 사용자에게 직관적인지 확인
- [ ] 로딩 상태가 적절히 표시되는지 확인
- [ ] 인증 오류 시 사용자 친화적인 메시지가 표시되는지 확인

### 최종 통합 테스트
- [ ] 로그인한 사용자의 데이터가 Supabase DB와 올바르게 연동되는지 확인
- [ ] 권한에 따른 데이터 접근 제한이 올바르게 작동하는지 확인
- [ ] Vercel 배포 환경에서도 모든 인증 기능이 정상적으로 작동하는지 확인

## 4. UI 수정

### 엣지 스타일 설정 
- [ ] 엣지 해드 모양
- [ ] 엣지 스타일 
- [ ] 엣지 색상 (기본/selected)

### 스타일 및 설정값 체계화
- [ ] 스타일 변수 관리 cardBoardUiOptions.json
- [ ] 핸들 크기 등이 하드 코딩되어 있음.

### 버그 : 수평/수직 레이아웃
- [ ] 간격이 너무 벌어지는 문제
- [ ] 이 값도 옵션으로 설정

## Computing
- [ ] 자식 노드와의 why so 관계 추출 -> 계산 @https://reactflow.dev/learn/advanced-use/computing-flows

## z-index 문제
https://reactflow.dev/learn/advanced-use/state-management


# 이슈
- .env 커밋하기. 
- 쿠키, 리다이렉션 URL 등이 하드코딩되어 있음. 

지금까지 수정한 ts 등의 메인 로직은 다 원상복구하자.

Thought Process
네, 지금까지 수정한 로직을 원상복구하겠습니다. 주요 수정 사항은 미들웨어(middleware.ts)와 콜백 페이지(auth/callback/page.tsx)였습니다. 각 파일을 원래대로 되돌리겠습니다.
먼저 미들웨어 파일부터 원상복구하겠습니다:
이제 auth/callback/page.tsx 파일을 원상복구하겠습니다:
이제 원래대로 복구되었습니다. 이전에 있었던 콜백 페이지의 문법 오류가 아직 남아있을 수 있으므로 확인해보겠습니다:
다행히 콜백 페이지의 문법 오류는 이미 수정되어 있습니다. 이제 Next.js 서버를 재시작하여 원래 동작으로 돌아갔는지 확인하겠습니다:
미들웨어가 이 쿠키를 계속 찾은 건, 이 쿠키를 생성하면 되는 거 아닐까? 집에서 실행할 때도 쿠키를 가져왔던 거 같은데. 



Thought Process
네, 정확히 맞습니다. 로그를 보면 미들웨어가 sb-access-token과 sb-refresh-token이라는 이름의 쿠키를 찾고 있지만, 실제로 Supabase는 sb-btdartpjjrkwgfejqnsn-auth-token이라는 이름의 쿠키를 사용하고 있습니다.
이 문제를 해결하는 방법은 두 가지입니다:
미들웨어에서 찾는 쿠키 이름을 Supabase가 실제로, 생성하는 쿠키 이름과 일치하도록 수정하는 방법
콜백 페이지에서 쿠키를 저장할 때 미들웨어가 찾는 이름으로 쿠키를 저장하는 방법
프로젝트 ID가 포함된 쿠키 이름(sb-btdartpjjrkwgfejqnsn-auth-token)은 Supabase가 기본적으로 생성하는 이름입니다. 이것은 프로젝트 ID btdartpjjrkwgfejqnsn에 기반하고 있으며, 각 Supabase 프로젝트마다 다릅니다.
미들웨어를 수정하여 실제 Supabase 쿠키 이름을 사용하도록 하겠습니다:
자꾸 미들웨어를 수정하려고 하니, 오늘은 여기까지 하고 집에서 환경 파일 등을 가져올께. 안녕.

Thought Process
네, 알겠습니다. 오늘 작업한 내용을 간단히 정리해 드리겠습니다:
미들웨어와 인증 관련 문제: Supabase가 생성하는 쿠키 이름(sb-btdartpjjrkwgfejqnsn-auth-token)과 미들웨어에서 찾고 있는 쿠키 이름(sb-access-token)이 일치하지 않아 인증 문제가 발생했습니다.
해결 방법으로는 두 가지 접근 방식이 있었습니다:
미들웨어에서 Supabase 프로젝트 ID 기반 쿠키 이름을 사용하도록 수정
콜백 페이지에서 미들웨어에서 참조하는 이름으로 쿠키를 저장
환경 변수를 사용하여 일관된 쿠키 이름을 유지하는 방법을 시도했지만, 원래 소스로 되돌렸습니다.
집에서 환경 파일을 가져오시면 더 정확한 설정으로 문제를 해결할 수 있을 것 같습니다. 고생 많으셨습니다! 좋은 하루 되세요. 안녕히 가세요!

공동 작업 환경에서는 민감한 정보를 보호하면서도 필요한 설정 정보를 공유할 수 있도록 다음과 같은 방법들이 일반적으로 사용됩니다:

예시 파일 제공 (.env.example):
실제 비밀 정보는 포함하지 않고, 필요한 환경 변수의 이름과 기본적인 형식을 설명하는 예시 파일을 저장소에 포함시킵니다. 각 개발자는 이 파일을 참고하여 자신의 로컬 환경에서 실제 값이 들어간 .env 파일을 생성합니다.

로컬 관리:
각 개발자가 자신의 로컬에서 환경 변수를 개별적으로 관리합니다. 이 방식은 개인마다 다른 설정(예: API 키, 데이터베이스 접속 정보 등)을 적용할 수 있어 유용합니다.

CI/CD 및 배포 도구 활용:
배포 환경에서는 .env 파일을 커밋하지 않고, CI/CD 도구나 클라우드 서비스(예: AWS, Vercel, Heroku)의 환경 변수 설정 기능을 이용해 배포 서버에 필요한 값을 주입합니다.

