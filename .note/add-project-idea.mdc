---
description: 
globs: 
alwaysApply: false
---
Cursor Agent와 Vibe coding으로 앱을 만들고 있어. 이 앱에 **Project** 개념을 추가하고 싶어. 대략적인 기능 추가는 아래와 같이 생각하고 있는데, 소스 코드를 참고해서 Cursor Agent가 이해할 수 있는 Tasklist를 작성해줘.

1. 코드 변경은 가능하면 한 파일을 수정한 후 버그가 없는 상태로 만들고, 테스트코드를 작성하고, 실행해서 에러가 없는지 확인할 수 있는 단위로 계획을 작성해줘.

2. 단위 테스트 시나리오를 먼저 만들고, 테스트가 모두 true를 반환하게 만든 후, 테스트에 맞게 코드를 추가하는 TDD 방식으로 작업했으면 좋겠어.

3. 각 단위의 개발이 끝나면 내가 확인할 수 있는 방법을 가이드. (ex. 콘솔에서 스크립트 입력, 브라우저 URL 접근 후 결과 확인, supabase 관리 도구에서 확인 등등)


내가 작성한 대략의 기능/시나리오는 아래와 같아.

**Issue**
- 리펙토링 zustand
  - 초기화 리펙토링 
  - Card 리펙토링을 먼저 해야 하나?
  - User 리펙토링을 먼저 해야 하나?
  - toast 사용 대부분 console.log로 변경
- 카드 소유자 = 로그인한 사용자로 변경
- 사이드바와 board의 외부 데이터 주입 테스트 해야 함. 
- UI는 순서대로 하나하나 진행하는 편이 좋겠다
- 로컬 스토리지 정보는 로컬 db로 이전. + 로컬 스토리지 정책 확정 필요. (업로드 실패 대비?)

**프로젝트 개념 도입 + DB 리펙토링**

***개념***
User me +-> Project 1  +- card 1, 2, 3, 4      <-- [share the cards/projects] --- User Z
        +              +- tree & node info
        +              +- project info
        +         
        +-> Project 2  +- card a, b, c, q
                       +- tree & node info
                       +- project info

**전제**
- '[Zustand-action-msw]' 규칙을 준수하여 Zustand action 기반 커맨드 패턴 구현 
- UI는 반드시 shadcn 컴포넌트를 사용. shadcn 컴포넌트로 만들 수 없는 경우만 나에게 물어보고 별도 구현.
- 모든 변경은 User Rules를 준수하고, 테스트 가능해야 함

**Phase 1: Backend 개발**    

1. **프로젝트 스키마 작성:** 
  - [ ] 프로젝트 이름
  - [ ] 소유자 
  - [ ] 생성일
  - [ ] 수정일
  - [ ] 프로젝트 uid
  - [ ] 프로젝트 설정 정보
  - [ ] 프로젝트 카드 배열
  - [ ] 기타 필요한 데이터 
  - [ ] 지금의 카드는 프로젝트 정보를 오늘 생성한 것으로 설정해서 생성하고 프로젝트에 추가 

2.  **DB 설정**  
  - [ ] 로컬 서버 저장 테스트 
  - [ ] DB 마이그레이션
  - [ ] Prisma 클라이언트를 새로 생성합니다.
  - [ ] 프로덕션 빌드 -> supabase DB 테스트 

3. API 구현
  - 프로젝트 추가, 수정, 삭제 등 CRUD Zustand action + MSW로 액션 구현 
  - CRUD API 엔드포인트 생성 
  - CRUD API 라우트 생성
  - CRUD DB 연동 
  - 프로젝트 휴지통 구현

4. 새 프로젝트 정보를 삽입 (소유자는 wodory@gmail.com) + 기존 카드를 모두 새 프로젝트로 추가. 

**Phase 2: UI 개발 **    


프로젝트 목록을 보여주는 모달 (현재 목록을 불러오기만 함)
프로젝트 정보를 자세하게 보여주는 모달 (현재는 간단한 토스트 메시지로 표시)
새 프로젝트를 생성하는 폼 모달 (현재는 간단한 프롬프트 사용)
프로젝트 간 전환 기능 및 UI

1. **프로젝트 UI 구현:**  
  - [ ] 로그인 하지 않은 첫 화면
    - [ ] 화면을 수직으로 2등분 + 왼쪽에는 웰컴 이미지
    - [ ] 로그인 하지 않았으면 오른쪽에는 로그인 + 가입 화면. 가입 안내를 더 크게. 

  - [ ] 대시보드 구현 
    - [ ] new project 
      - [ ] "프로젝트 만들기" 모달
      - [ ] 배경은 투명 검정색 + 모달 위치는 화면 가운데 (creatCard 참고)
      - [ ] 새 프로젝트를 만들었다면 메인 스크린으로 이동
    - [ ] 기존 프로젝트 열기
      - [ ] 프로젝트 목록
      - [ ] 프로젝트 목록에 호버하면 프로젝트 삭제 아이콘 표시
      - [ ] 프로젝트를 클릭하면 목록 오른쪽에 프로젝트 정보 표시 (작성자, 생성일, 카드 갯수 ... )
      - [ ] 프로젝트를 더블클릭하거나 프로젝트 클릭 후 [열기] 클릭하면 메인 스크린으로 이동
      - [ ] 프로젝트 삭제하면 카드는 어떻게 해야 하지... 아마 전체 삭제. 단, trashcan으로 이동. (90일 보관)
    - [ ] 백업한 프로젝트 열기
      - [ ] file open dialog 

2.  **메인 화면**  
  - [ ] 프로젝트를 불러오거나 변경하면 
    - [ ] ProjectToolbar에 프로젝트 이름 표시
    - [ ] 프로젝트 정보에 맞춰 사이드바, 캔버스 등이 초기화 + 업데이트
    - [ ] 성능 최적화를 위해 모든 UI를 다시 그리지 말고, 각 컴포넌트의 데이터만 초기화 + 리로드
  - [ ] ProjectToolbar
    - [ ] "프로젝트 이름"이란 static text 대신 "{프로젝트 이름} - {작성자}" 표시. 작성자는 user nickname.
    - [ ] 메뉴에 [프로젝트 정보...], [프로젝트 불러오기]
    - [ ] 보드 세팅도 요즘 스타일로 바꾸기?




